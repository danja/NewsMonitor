<?xml version="1.0" encoding="UTF-8" ?>
<!--RDF based XML document generated By OpenLink Virtuoso-->
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
 <rss:channel xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/">
  <rss:title>Kingsley Idehen&#39;s Blog Data Space</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/</rss:link>
  <rss:description>I have seen the future and it&#39;s full of Linked Data! :-)</rss:description>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2014-05-28T21:04:19Z</dc:date>
  <dc:rights xmlns:dc="http://purl.org/dc/elements/1.1/" />
  <dc:language xmlns:dc="http://purl.org/dc/elements/1.1/">en-us</dc:language>
  <rss:items>
   <rdf:Seq>
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1662" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1657" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1656" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1654" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1653" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1652" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1651" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1646" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1644" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1641" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1642" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1655" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1648" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1647" />
      <rdf:li rdf:resource="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1643" />
   </rdf:Seq>
  </rss:items>
 </rss:channel>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1662">
  <rss:title>Data Spaces</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1662</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1662</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1662</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2011-03-01T23:49:26Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">There is increasing coalescence around the idea that HTTP-based Linked Data adds a tangible dimension to the World Wide Web (Web). This Data Dimension grants end-users, power-users, integrators, and developers the ability to experience the Web not solely as a Information Space or Document Space, but now also as a Data Space. Here is a simple What and Why guide covering the essence of Data Spaces. What is a Data Space? A Data Space is a point of presence on a network, where every Data Object (item or entity) is given a Name (e.g., a URI) by which it may be Referenced or Identified. In a Data Space, every Representation of those Data Objects (i.e., every Object Representation) has an Address (e.g., a URL) from which it may be Retrieved (or &quot;gotten&quot;). In a Data Space, every Object Representation is a time variant (that is, it changes over time), streamable, and format-agnostic Resource. An Object Representation is simply a Description of that Object. It takes the form of a graph, pictorially constructed from sets of 3 elements which are themselves named Subject, Predicate, and Object (or SPO); or Entity, Attribute, and Value (or EAV). Each Entity+Attribute+Value or Subject+Predicate+Object set (or triple), is one datum, one piece of data, one persisted observation about a given Subject or Entity. The underlying Schema that defines and constrains the construction of Object Representations is based on Logic, specifically First-Order Logic. Each Object Representation is a collection of persisted observations (Data) about a given Subject, which aid observers in materializing their perception (Information), and ultimately comprehension (Knowledge), of that Subject. Why are Data Spaces important? In the real-world -- which is networked by nature -- data is heterogeneously (or &quot;differently&quot;) shaped, and disparately located. Data has been increasing at an alarming rate since the advent of computing; the interWeb simply provides context that makes this reality more palpable and more exploitable, and in the process virtuously ups the ante through increasingly exponential growth rates. We can&#39;t stop data heterogeneity; it is endemic to the nature of its producers -- humans and/or human-directed machines. What we can do, though, is create a powerful Conceptual-level &quot;bus&quot; or &quot;interface&quot; for data integration, based on Data Description oriented Logic rather than Data Representation oriented Formats. Basically, it&#39;s possible for us to use a Common Logic as the basis for expressing and blending SPO- or EAV-based Object Representations in a variety of Formats (or &quot;dialects&quot;). The roadmap boils down to: Assigning unambiguous Object Names to: Every record (or, in table terms, every row); Every record attribute (or, in table terms, every field or column); Every record relationship (that is, every relationship between one record and another); Every record container (e.g., every table or view in a relational database, every named graph, every spreadsheet, every text file, etc.); Making each Object Name resolve to an Address through which Create, Read, Update, and Delete (&quot;CRUD&quot;) operations can be performed against (can access) the associated Object Representation graph.</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>There is increasing coalescence around the idea that HTTP-based <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x1e93cbd0">Linked Data</a> adds a tangible dimension to the <a class="auto-href" href="http://dbpedia.org/resource/World_Wide_Web" id="link-id0x1dfdde10">World Wide Web</a> (<a href="http://dbpedia.org/resource/World_Wide_Web">Web</a>). This <i><a href="http://dbpedia.org/resource/Data">Data</a> Dimension</i> grants end-users, power-users, integrators, and developers the ability to experience the Web not solely as a <i><a class="auto-href" href="http://dbpedia.org/resource/Information" id="link-id0x19d02b00">Information</a> Space</i> or <i>Document Space,</i> but now also as a <i><a class="auto-href" href="http://en.wikipedia.org/wiki/Data_Spaces" id="link-id0x1ac33378">Data Space</a>.</i>
</p>

<p>Here is a simple What and Why guide covering the essence of Data Spaces.</p>

<h2>What is a Data Space?</h2>

<p>A Data Space is a point of presence on a network, where every <i>Data Object</i> (item or <a class="auto-href" href="http://dbpedia.org/resource/Entity" id="link-id0x1d55f910">entity</a>) is given a <i>Name</i> (e.g., a <a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Identifier" id="link-id0x1736ea28">URI</a>) by which it may be Referenced or Identified. 

</p>
<p>In a Data Space, every <i>Representation</i> of those Data Objects (i.e., every <i>Object Representation</i>) has an <i>Address</i> (e.g., a <a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Locator" id="link-id0x1f17f5a8">URL</a>) from which it may be Retrieved (or &quot;gotten&quot;).</p>

<p>In a Data Space, every Object Representation is a time variant (that is, it changes over time), streamable, and format-agnostic <i>Resource.</i>
</p>

<p>An Object Representation is simply a Description of that Object. It takes the form of a graph, pictorially constructed from sets of 3 elements which are themselves named <i>Subject,</i> <i>Predicate,</i> and <i>Object</i> (or <i>SPO</i>); or <i>Entity,</i> <i>Attribute,</i> and <i>Value</i> (or <i>EAV</i>). Each <a class="auto-href" href="http://dbpedia.org/resource/Entity-attribute-value_model" id="link-id0x1dedcfe0">Entity</a>+Attribute+Value or Subject+Predicate+Object set (or <i>triple</i>), is one datum, one piece of data, one persisted observation about a given Subject or Entity.</p>

<p>The underlying Schema that defines and constrains the construction of Object Representations is based on Logic, specifically <i>First-Order Logic</i>. 

Each Object Representation is a collection of persisted observations (<i>Data</i>) about a given Subject, which aid observers in materializing their perception (<i>Information</i>), and ultimately comprehension (<i><a class="auto-href" href="http://dbpedia.org/resource/Knowledge" id="link-id0x1a4c7bf8">Knowledge</a></i>), of that Subject.</p>

<h2>Why are Data Spaces important?</h2>

<p>In the real-world -- which is networked by nature -- data is heterogeneously (or &quot;differently&quot;) shaped, and disparately located. </p>

<p>Data has been increasing at an alarming rate since the advent of computing; the interWeb simply provides <a class="auto-href" href="http://dbpedia.org/resource/Context_%28language_use%29" id="link-id0x1ad97358">context</a> that makes this reality more palpable and more exploitable, and in the process virtuously ups the ante through increasingly exponential growth rates.</p>

<p>We can&#39;t stop data heterogeneity; it is endemic to the nature of its producers -- humans and/or human-directed machines. What we can do, though, is create a powerful Conceptual-level &quot;bus&quot; or &quot;interface&quot; for data integration, based on <i>Data Description oriented Logic</i> rather than Data Representation oriented Formats. Basically, it&#39;s possible for us to use a <i><a href="http://en.wikipedia.org/wiki/First-order_predicate_logic" id="link-id0x1a481248">Common Logic</a></i> as the basis for expressing and blending SPO- or EAV-based Object Representations in a variety of Formats (or &quot;dialects&quot;).</p>

<p>The roadmap boils down to:</p>

<ol>
 <li>
  <p>Assigning unambiguous Object Names to:</p>

<ul>
   <li>
      <p>Every record (or, in table terms, every row); </p>
   </li>
<li>
      <p>Every record attribute (or, in table terms, every field or column);</p>
    </li>
<li>
      <p>Every record relationship (that is, every relationship between one record and another);</p>
    </li>
<li>
      <p>Every record container (e.g., every table or view in a relational database, every named graph, every spreadsheet, every text file, etc.);</p>
    </li>
</ul>
 </li>

<li>
  <p>Making each Object Name resolve to an Address through which Create, Read, Update, and Delete (&quot;CRUD&quot;) operations can be performed against (can <i>access</i>) the associated Object Representation graph.</p>
</li>
</ol>
]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1657">
  <rss:title>New Preconfigured Virtuoso AMI for Amazon EC2 Cloud comprised of Linked Data from BBC &amp; DBpedia</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1657</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1657</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1657</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2011-02-19T01:20:30Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">What? Introducing a new preloaded and preconfigured Virtuoso (Cluster Edition) AMI for the Amazon EC2 Cloud that hosts combined Linked Datasets from: DBpedia 3.6 BBC Programmes BBC Music BBC Nature BBC Food Recipes Why? Predictably instantiate a powerful database with high quality data and cross links within minutes, for personal or service specific use. How? Simply follow the instructions in our Amazon EC2 guide for the BBC + DBpedia 3.6 Linked Dataset guide. Your installation steps are as follows: Instantiate a Virtuoso EC2 AMI Mount the Amazon Elastic Block Storage (EBS) snapshot that hosts the preloaded Virtuoso Database. Related BBC Linked Data Spaces Presentation BBC Music Linked Dataset Snapshot -- PivotViewer Page Screenshot BBC Programmes Linked Dataset Snapshot -- -- PivotViewer Page Screenshot BBC Nature Linked Dataset Snapshot -- PivotViewer Page Screenshot BBC Food Recipes Snapshot -- PivotViewer Page Screenshot My Del.icio.us bookmark collection re. BBC Linked Data Demos Amazon EC2 Snapshots for DBpedia 3.6 + BBC combo -- delivers the BBC and DBpedia dataset combo via a mountable Elastic Block Storage (EBS) device usable with an Amazon Machine Image (AMI) Amazon EC2 Snapshots for DBpedia 3.6 &amp; 3.5 Virtuoso Commercial Edition Download Page Virtuoso Cluster Edition Guide</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[
<h2>What?</h2>
<p>Introducing a new preloaded and preconfigured <a class="auto-href" href="http://virtuoso.openlinksw.com" id="link-id0x1bbe32d8">Virtuoso</a> (Cluster Edition) AMI for the Amazon EC2 Cloud that hosts combined Linked Datasets from: </p>
<ul>
<li>
  <a href="http://dbpedia.org/About" id="link-id0x1d21e780">DBpedia 3.6</a>
</li>
<li>
  <a href="http://www.bbc.co.uk/programmes" id="link-id0x1e1e0b10">BBC Programmes</a>
</li>
<li>
  <a href="http://www.bbc.co.uk/music" id="link-id0x1db12bd0">BBC Music</a>
</li>
<li>
  <a href="http://www.bbc.co.uk/nature/" id="link-id0x1bd46450">BBC Nature</a>
</li>
<li>
  <a href="http://www.bbc.co.uk/food/recipes/" id="link-id0x1d1b2468">BBC Food Recipes</a>
</li>
</ul>


<h2>Why?</h2>
<p>
Predictably instantiate a powerful database with high quality <a href="http://dbpedia.org/resource/Data">data</a> and cross links within minutes, for personal or service specific use.  </p>

<h2>How?</h2>

<p>Simply follow the instructions in our <a href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtAWSBBCMusicProgNatureFoodAndDBpedia36" id="link-id0x1d4f3210">Amazon EC2 guide for the BBC + DBpedia 3.6 Linked Dataset</a> guide.</p>
<p>Your installation steps are as follows:</p>
<ol>
<li>
Instantiate a Virtuoso EC2 AMI
</li>
<li>
Mount the Amazon Elastic Block Storage (EBS) snapshot that hosts the preloaded Virtuoso Database.
</li>
</ol>
<h2>Related</h2>
<ul>
<li>
<a href="http://www.slideshare.net/reduxd/beyond-the-polar-bear" id="link-id0x1b384af0">BBC Linked Data Spaces Presentation</a>
</li>
<li>
  <a href="http://kidehen-images.s3.amazonaws.com/bbc_music_solo_artists_snapshot.png" id="link-id0x1a7a5ae0">BBC Music Linked Dataset Snapshot</a> -- PivotViewer Page Screenshot
</li>
<li>
  <a href="http://kidehen-images.s3.amazonaws.com/bbc_programmes_snapshot_sorted_by_genre.png" id="link-id0x1c2022a8">BBC Programmes Linked Dataset Snapshot</a> -- -- PivotViewer Page Screenshot
</li>
<li>
  <a href="http://kidehen-images.s3.amazonaws.com/bbc_nature_snapshot_sorted_by_adaptation.png" id="link-id0x1e138ac0">BBC Nature Linked Dataset Snapshot</a> -- PivotViewer Page Screenshot
</li>
<li>
  <a href="http://kidehen-images.s3.amazonaws.com/bbc_recipes_snapshot.png" id="link-id0x1b795100">BBC Food Recipes Snapshot </a> -- PivotViewer Page Screenshot
</li>
<li>
  <a href="http://www.delicious.com/kidehen/bbc_linkeddata" id="link-id0x1a581cf8">My Del.icio.us bookmark collection re. BBC Linked Data Demos</a>
</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtAWSDBpediaBBC" id="link-id0x1dc0cc08">Amazon EC2 Snapshots for DBpedia 3.6 + BBC combo</a> -- delivers the BBC and DBpedia dataset combo via a mountable Elastic Block Storage (EBS) device usable with an Amazon Machine Image (AMI)
</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtAWSDBpedia351C" id="link-id0x1de33b50">Amazon EC2 Snapshots for DBpedia 3.6 &amp; 3.5</a>
</li>
<li>
  <a href="http://virtuoso.openlinksw.com/download/" id="link-id0x1c3e27c8">Virtuoso Commercial Edition Download Page</a>
</li>
<li>
  <a href="http://docs.openlinksw.com/virtuoso/clusterstcnf.html" id="link-id0x1d0ff170">Virtuoso Cluster Edition Guide</a>
</li>
</ul>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1656">
  <rss:title>DBpedia + BBC (combined) Linked Data Space Installation Guide</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1656</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1656</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1656</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2011-02-17T22:15:41Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">What? The DBpedia + BBC Combo Linked Dataset is a preconfigured Virtuoso Cluster (4 Virtuoso Cluster Nodes, each comprised of one Virtuoso Instance; initial deployment is to a single Cluster Host, but license may be converted for physically distributed deployment), available via the Amazon EC2 Cloud, preloaded with the following datasets: DBpedia 3.6 BBC Programmes BBC Music BBC Nature BBC Food Recipes Why? The BBC has been publishing Linked Data from its Web Data Space for a number of years. In line with best practices for injecting Linked Data into the World Wide Web (Web), the BBC datasets are interlinked with other datasets such as DBpedia and MusicBrainz. Typical follow-your-nose exploration using a Web Browser (or even via sophisticated SPARQL query crawls) isn&#39;t always practical once you get past the initial euphoria that comes from comprehending the Linked Data concept. As your queries get more complex, the overhead of remote sub-queries increases its impact, until query results take so long to return that you simply give up. Thus, maximizing the effects of the BBC&#39;s efforts requires Linked Data that shares locality in a Web-accessible Data Space — i.e., where all Linked Data sets have been loaded into the same data store or warehouse. This holds true even when leveraging SPARQL-FED style virtualization — there&#39;s always a need to localize data as part of any marginally-decent locality-aware cost-optimization algorithm. This DBpedia + BBC dataset, exposed via a preloaded and preconfigured Virtuoso Cluster, delivers a practical point of presence on the Web for immediate and cost-effective exploitation of Linked Data at the individual and/or service specific levels. How? To work through this guide, you&#39;ll need to start with 90 GB of free disk space. (Only 41 GB will be consumed after you delete the installer archives, but starting with 90+ GB ensures enough work space for the installation.) Install Virtuoso Download Virtuoso installer archive(s). You must deploy the Personal or Enterprise Edition; the Open Source Edition does not support Shared-Nothing Cluster Deployment. Obtain a Virtuoso Cluster license. Install Virtuoso. Set key environment variables and start the OpenLink License Manager, using command (this may vary depending on your shell and install directory): . /opt/virtuoso/virtuoso-enterprise.sh Optional: To keep the default single-server configuration file and demo database intact, set the VIRTUOSO_HOME environment variable to a different directory, e.g., export VIRTUOSO_HOME=/opt/virtuoso/cluster-home/ Note: You will have to adjust this setting every time you shift between this cluster setup and your single-server setup. Either may be made your environment&#39;s default through the virtuoso-enterprise.sh and related scripts. Set up your cluster by running the mkcluster.sh script. Note that initial deployment of the DBpedia + BBC Combo requires a 4 node cluster, which is the default for this script. Start the Virtuoso Cluster with this command: virtuoso-start.sh Stop the Virtuoso Cluster with this command: virtuoso-stop.sh Using the DBpedia + BBC Combo dataset Navigate to your installation directory. Download the combo dataset installer script — bbc-dbpedia-install.sh. For best results, set the downloaded script to fully executable using this command: chmod 755 bbc-dbpedia-install.sh Shut down any Virtuoso instances that may be currently running. Optional: As above, if you have decided to keep the default single-server configuration file and demo database intact, set the VIRTUOSO_HOME environment variable appropriately, e.g., export VIRTUOSO_HOME=/opt/virtuoso/cluster-home/ Run the combo dataset installer script with this command: sh bbc-dbpedia-install.sh Verify installation The combo dataset typically deploys to EC2 virtual machines in under 90 minutes; your time will vary depending on your network connection speed, machine speed, and other variables. Once the script completes, perform the following steps: Verify that the Virtuoso Conductor (HTTP-based Admin UI) is in place via: http://localhost:[port]/conductor Verify that the Virtuoso SPARQL endpoint is in place via: http://localhost:[port]/sparql Verify that the Precision Search &amp; Find UI is in place via: http://localhost:[port]/fct Verify that the Virtuoso hosted PivotViewer is in place via: http://localhost:[port]/PivotViewer Related BBC Linked Data Spaces Presentation BBC Music Linked Dataset Snapshot -- PivotViewer Page Screenshot BBC Programmes Linked Dataset Snapshot -- -- PivotViewer Page Screenshot BBC Nature Linked Dataset Snapshot -- PivotViewer Page Screenshot BBC Food Recipes Snapshot -- PivotViewer Page Screenshot My Del.icio.us bookmark collection re. BBC Linked Data Demos Amazon EC2 Snapshots for DBpedia 3.6 + BBC combo -- delivers the BBC and DBpedia dataset combo via a mountable Elastic Block Storage (EBS) device usable with an Amazon Machine Image (AMI) Amazon EC2 Snapshots for DBpedia 3.6 &amp; 3.5 Virtuoso Commercial Edition Download Page Virtuoso Cluster Edition Guide</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<h2>What? </h2>

<p>
The <i><a class="auto-href" href="http://dbpedia.org/resource/DBpedia" id="link-id0x1c489cc8">DBpedia</a> + <a class="auto-href" href="http://dbpedia.org/resource/BBC" id="link-id0x1bf12698">BBC</a> Combo Linked Dataset </i> is a preconfigured <a class="auto-href" href="http://virtuoso.openlinksw.com" id="link-id0x1b16cbb0">Virtuoso</a> Cluster (4 Virtuoso Cluster Nodes, each comprised of one Virtuoso Instance; initial deployment is to a single Cluster Host, but license may be converted for physically distributed deployment), available via the Amazon EC2 Cloud, preloaded with the following datasets:
</p>

<ul>
<li>
  <a href="http://dbpedia.org/About" id="link-id0x1d21e780">DBpedia 3.6</a>
</li>
<li>
  <a href="http://www.bbc.co.uk/programmes" id="link-id0x1e1e0b10">BBC Programmes</a>
</li>
<li>
  <a href="http://www.bbc.co.uk/music" id="link-id0x1db12bd0">BBC Music</a>
</li>
<li>
  <a href="http://www.bbc.co.uk/nature/" id="link-id0x1bd46450">BBC Nature</a>
</li>
<li>
  <a href="http://www.bbc.co.uk/food/recipes/" id="link-id0x1d1b2468">BBC Food Recipes</a>
</li>
</ul>

<h2>Why?</h2>
<p>The BBC has been publishing <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x1b15eb60">Linked Data</a> from its <a href="http://dbpedia.org/resource/World_Wide_Web">Web</a> <a class="auto-href" href="http://en.wikipedia.org/wiki/Data_Spaces" id="link-id0x1c4c38a8">Data Space</a> for a number of years. In line with best practices for injecting Linked Data into the <a class="auto-href" href="http://dbpedia.org/resource/World_Wide_Web" id="link-id0x1e5acda0">World Wide Web</a> (Web), the BBC datasets are interlinked with other datasets such as DBpedia and MusicBrainz. </p>

<p>Typical follow-your-nose exploration using a Web Browser (or even via sophisticated <a class="auto-href" href="http://dbpedia.org/resource/SPARQL" id="link-id0x1d21e728">SPARQL</a> query crawls) isn&#39;t always practical once you get past the initial euphoria that comes from comprehending the Linked Data concept. As your queries get more complex, the overhead of remote sub-queries increases its impact, until query results take so long to return that you simply give up.</p>

<p>Thus, maximizing the effects of the BBC&#39;s efforts requires Linked Data that shares locality in a Web-accessible Data Space — i.e., where all Linked Data sets have been loaded into the same data store or warehouse. This holds true even when leveraging SPARQL-FED style virtualization — there&#39;s always a need to localize data as part of any marginally-decent locality-aware cost-optimization algorithm.</p>

<p>This DBpedia + BBC dataset, exposed via a preloaded and preconfigured Virtuoso Cluster, delivers a practical point of presence on the Web for immediate and cost-effective exploitation of Linked Data at the individual and/or service specific levels.</p>

<h2>How?</h2>

To work through this guide, you&#39;ll need to start with 90 GB of free disk space.  (Only 41 GB will be consumed after you delete the installer archives, but starting with 90+ GB ensures enough work space for the installation.)


<h3>Install Virtuoso</h3>
<ol>
<li>
  <p>
    <a href="http://virtuoso.openlinksw.com/download/" id="link-id0x1af0d230">Download Virtuoso installer archive(s)</a>.  You must deploy the Personal or Enterprise Edition; the Open Source Edition does not support Shared-Nothing Cluster Deployment.</p>
</li>

<li>
  <p>
    <a href="http://virtuoso.openlinksw.com/pricing/" id="link-id0x1e089f40">Obtain a Virtuoso Cluster license</a>.</p>
</li>

<li>
  <p>
    <a href="http://wikis.openlinksw.com/dataspace/owiki/wiki/VirtuosoWikiWeb/VirtuosoInstallDocs" id="link-id0x1e86d060">Install Virtuoso</a>.</p>
</li>

<li>
  <p>Set key environment variables and start the OpenLink License Manager, using command (this may vary depending on your shell and install directory): </p>
<blockquote>
    <code>. /opt/virtuoso/virtuoso-enterprise.sh</code>
  </blockquote>
</li>

<li>
  <p>
    <i>Optional:</i> To keep the default single-server configuration file and demo database intact, set the <code>VIRTUOSO_HOME</code> environment variable to a different directory, e.g., </p>
<blockquote>
    <code>export VIRTUOSO_HOME=/opt/virtuoso/cluster-home/</code>
  </blockquote>
<p>
    <i><b>Note:</b> You will have to adjust this setting every time you shift between this cluster setup and your single-server setup.  Either may be made your environment&#39;s default through the <code>virtuoso-enterprise.sh</code> and related scripts.</i>
  </p>
</li>

<li>
  <p>
    <a href="http://docs.openlinksw.com/virtuoso/clusterstcnf.html" id="link-id0x1e184dc0">Set up your cluster</a> by running the <code>mkcluster.sh</code> script.  Note that initial deployment of the <i>DBpedia + BBC Combo</i> requires a 4 node cluster, which is the default for this script.</p>
</li>

<li>
  <p>Start the Virtuoso Cluster with this command:</p>
<blockquote>
    <code>virtuoso-start.sh</code>
  </blockquote>
</li>

<li>
  <p>Stop the Virtuoso Cluster with this command:</p>
<blockquote>
    <code>virtuoso-stop.sh</code>
  </blockquote>
</li>

</ol>


<h3>Using the DBpedia + BBC Combo dataset</h3>

<ol>
<li>
  <p>Navigate to your installation directory.</p>
</li>

<li>
  <p>Download the combo dataset installer script — <code><a href="https://s3.amazonaws.com/bbc-dbpedia-36-usa/bbc-dbpedia-install.sh" id="link-id0x195d7940">bbc-dbpedia-install.sh</a></code>.</p>
</li>

<li>
  <p>For best results, set the downloaded script to fully executable using this command:</p>
  <blockquote>
    <code>chmod 755 bbc-dbpedia-install.sh </code>
  </blockquote>
</li>

<li>
  <p>Shut down any Virtuoso instances that may be currently running.</p>
</li>

<li>
  <p>
    <i>Optional:</i> As above, if you have decided to keep the default single-server configuration file and demo database intact, set the <code>VIRTUOSO_HOME</code> environment variable appropriately, e.g., </p>
<blockquote>
    <code>export VIRTUOSO_HOME=/opt/virtuoso/cluster-home/</code>
  </blockquote>
</li>

<li>
  <p>Run the combo dataset installer script with this command:</p>
  <blockquote>
    <code>sh bbc-dbpedia-install.sh</code>
  </blockquote>
</li>

</ol>

<h3>Verify installation</h3>
<p>The combo dataset typically deploys to EC2 virtual machines in under 90 minutes; your time will vary depending on your network connection speed, machine speed, and other variables.</p>

<p>Once the script completes, perform the following steps:</p>

<ol>
<li>
  <p>Verify that the Virtuoso Conductor (HTTP-based Admin UI) is in place via:</p>
<blockquote>
    <code>http://localhost:[port]/conductor</code>
  </blockquote>
</li>
<li>
  <p>Verify that the Virtuoso SPARQL endpoint is in place via:</p> <blockquote>
    <code>http://localhost:[port]/sparql</code>
  </blockquote>
</li>
<li>
  <p>Verify that the Precision Search &amp; Find UI is in place via:</p>
<blockquote>
    <code>http://localhost:[port]/fct</code>
  </blockquote>
</li>
<li>
  <p>Verify that the Virtuoso hosted PivotViewer is in place via:</p> <blockquote>
    <code>http://localhost:[port]/PivotViewer</code>
  </blockquote>
</li>
</ol>

<h2>Related</h2>
<ul>
<li>
<a href="http://www.slideshare.net/reduxd/beyond-the-polar-bear" id="link-id0x1bd43bf0">BBC Linked Data Spaces Presentation</a>
</li>
<li>
  <a href="http://kidehen-images.s3.amazonaws.com/bbc_music_solo_artists_snapshot.png" id="link-id0x1a7a5ae0">BBC Music Linked Dataset Snapshot</a> -- PivotViewer Page Screenshot
</li>
<li>
  <a href="http://kidehen-images.s3.amazonaws.com/bbc_programmes_snapshot_sorted_by_genre.png" id="link-id0x1c2022a8">BBC Programmes Linked Dataset Snapshot</a> -- -- PivotViewer Page Screenshot
</li>
<li>
  <a href="http://kidehen-images.s3.amazonaws.com/bbc_nature_snapshot_sorted_by_adaptation.png" id="link-id0x1e138ac0">BBC Nature Linked Dataset Snapshot</a> -- PivotViewer Page Screenshot
</li>
<li>
  <a href="http://kidehen-images.s3.amazonaws.com/bbc_recipes_snapshot.png" id="link-id0x1b795100">BBC Food Recipes Snapshot </a> -- PivotViewer Page Screenshot
</li>
<li>
  <a href="http://www.delicious.com/kidehen/bbc_linkeddata" id="link-id0x1c0ffcc8">My Del.icio.us bookmark collection re. BBC Linked Data Demos</a>
</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtAWSDBpediaBBC" id="link-id0x1dc0cc08">Amazon EC2 Snapshots for DBpedia 3.6 + BBC combo</a> -- delivers the BBC and DBpedia dataset combo via a mountable Elasti<a class="auto-href" href="http://dbpedia.org/resource/C%2B%2B" id="link-id0x1c2ad728">c</a> Block Storage (EBS) device usable with an Amazon Machine Image (AMI)
</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtAWSDBpedia351C" id="link-id0x1de33b50">Amazon EC2 Snapshots for DBpedia 3.6 &amp; 3.5</a>
</li>
<li>
  <a href="http://virtuoso.openlinksw.com/download/" id="link-id0x1c3e27c8">Virtuoso Commercial Edition Download Page</a>
</li>
<li>
  <a href="http://docs.openlinksw.com/virtuoso/clusterstcnf.html" id="link-id0x1d0ff170">Virtuoso Cluster Edition Guide</a>
</li>
</ul>
]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1654">
  <rss:title>Virtuoso + DBpedia 3.6 Installation Guide (Update 1)</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1654</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1654</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1654</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2011-01-25T01:08:55Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">What is DBpedia? DBpedia is a community effort to provide a contemporary deductive database derived from Wikipedia content. Project contributions can be partitioned as follows: Ontology Construction and Maintenance Dataset Generation via Wikipedia Content Extraction &amp; Transformation Live Database Maintenance &amp; Administration -- includes actual Linked Data loading and publishing, provision of SPARQL endpoint, and traditional DBA activity Internationalization. Why is DBpedia important? Comprising the nucleus of the Linked Open Data effort, DBpedia also serves as a fulcrum for the burgeoning Web of Linked Data by delivering a dense and highly-interlinked lookup database. In its most basic form, DBpedia is a great source of strong and resolvable identifiers for People, Places, Organizations, Subject Matter, and many other data items of interest. Naturally, it provides a fantastic starting point for comprehending the fundamental concepts underlying TimBL&#39;s initial Linked Data meme. How do I use DBpedia? Depending on your particular requirements, whether personal or service-specific, DBpedia offers the following: Datasets that can be loaded on your deductive database (also known as triple or quad stores) platform of choice Live browsable HTML+RDFa based entity description pages A wide variety of data formats for importing entity description data into a broad range of existing applications and services A SPARQL endpoint allowing ad-hoc querying over HTTP using the SPARQL query language, and delivering results serialized in a variety of formats A broad variety of tools covering query by example, faceted browsing, full text search, entity name lookups, etc. What is the DBpedia 3.6 + Virtuoso Cluster Edition Combo? OpenLink Software has preloaded the DBpedia 3.6 datasets into a preconfigured Virtuoso Cluster Edition database, and made the package available for easy installation. Why is the DBpedia+Virtuoso package important? The DBpedia+Virtuoso package provides a cost-effective option for personal or service-specific incarnations of DBpedia. For instance, you may have a service that isn&#39;t best-served by competing with the rest of the world for ad-hoc query time and resources on the live instance, which itself operates under various restrictions which enable this ad-hoc query service to be provided at Web Scale. Now you can easily commission your own instance and quickly exploit DBpedia and Virtuoso&#39;s database feature set to the max, powered by your own hardware and network infrastructure. How do I use the DBpedia+Virtuoso package? Pre-requisites are simply: Functional Virtuoso Cluster Edition installation. Virtuoso Cluster Edition License. 90 GB of free disk space -- you ultimately only need 43 gigs, but this our recommended free disk space size pre installation completion. To install the Virtuoso Cluster Edition simply perform the following steps: Download Software. Run installer Set key environment variables and start the OpenLink License Manager, using command (this may vary depending on your shell): . /opt/virtuoso/virtuoso-enterprise.sh Run the mkcluster.sh script which defaults to a 4 node cluster Set VIRTUOSO_HOME environment variable -- if you want to start cluster databases distinct from single server databases via distinct root directory for database files (one that isn&#39;t adjacent to single-server database directories) Start Virtuoso Cluster Edition instances using command: virtuoso-start.sh Stop Virtuoso Cluster Edition instances using command: virtuoso-stop.sh To install your personal or service specific edition of DBpedia simply perform the following steps: Navigate to your installation directory Download Installer script (dbpedia-install.sh) Set execution mode on script using command: chmod 755 dbpedia-install.sh Shutdown any Virtuoso instances that may be currently running Set your VIRTUOSO_HOME environment variable, e.g., to the current directory, via command (this may vary depending on your shell): export VIRTUOSO_HOME=`pwd` Run script using command: sh dbpedia-install.sh Once the installation completes (approximately 1 hour and 30 minutes from start time), perform the following steps: Verify that the Virtuoso Conductor (HTML based Admin UI) is in place via: http://localhost:[port]/conductor Verify that the Precision Search &amp; Find UI is in place via: http://localhost:[port]/fct Verify that DBpedia&#39;s Green Entity Description Pages are in place via: http://localhost:[port]/resource/DBpedia Related Amazon EC2 Snapshots for DBpedia 3.6 &amp; 3.5 Virtuoso Commercial Edition Download Page Virtuoso Cluster Edition Guide What is the DBpedia Project?</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<h3>What is <a class="auto-href" href="http://dbpedia.org/resource/DBpedia" id="link-id0x1d8b5df0">DBpedia</a>?</h3>
<p>
DBpedia is a community effort to provide a contemporary deductive database derived from Wikipedia content. Project contributions can be partitioned as follows:
</p>

<ol>
<li>
Ontology Construction and Maintenance
</li>
<li>
Dataset Generation via Wikipedia Content Extraction &amp; Transformation 
</li>
<li>
Live Database Maintenance &amp; Administration -- includes actual <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x1ba81190">Linked Data</a> loading and publishing, provision of <a class="auto-href" href="http://dbpedia.org/resource/SPARQL" id="link-id0x1d8af808">SPARQL</a> endpoint, and traditional DBA activity
</li>
<li>
Internationalization.
</li>
</ol>

<h3>Why is DBpedia important?</h3>
<p>
Comprising the nucleus of the Linked Open <a href="http://dbpedia.org/resource/Data">Data</a> effort, DBpedia also serves as a fulcrum for the burgeoning <a href="http://dbpedia.org/resource/World_Wide_Web">Web</a> of Linked Data by delivering a dense and highly-interlinked lookup database. In its most basic form, DBpedia is a great source of strong and resolvable identifiers for People, Places, Organizations, Subject Matter, and many other data items of interest. Naturally, it provides a fantastic starting point for comprehending the fundamental concepts underlying <a class="auto-href" href="http://www.w3.org/People/Berners-Lee/card#i" id="link-id0x1a8cc3d0">TimBL</a>&#39;s initial <a href="http://blogs.usnet.private:8893/www.w3.org/DesignIssues/LinkedData.html" id="link-id0x1cbbaf50">Linked Data</a> meme.
</p>

<h3>How do I use DBpedia?</h3>
<p>
Depending on your particular requirements, whether personal or service-specific, DBpedia offers the following:
</p>
<ul>
<li>
Datasets that can be loaded on your deductive database (also known as triple or quad stores) platform of choice
</li>
<li>
Live browsable HTML+<a class="auto-href" href="http://dbpedia.org/resource/RDFa" id="link-id0x1d6b2148">RDFa</a> based <a class="auto-href" href="http://dbpedia.org/resource/Entity" id="link-id0x1d766a98">entity</a> description pages 
</li>
<li>
A wide variety of data formats for importing entity description data into a broad range of existing applications and services
</li>
<li>
A SPARQL endpoint allowing ad-hoc querying over HTTP using the SPARQL query language, and delivering results serialized in a variety of formats
</li>
<li>
A broad variety of tools covering query by example, faceted browsing, <a class="auto-href" href="http://dbpedia.org/resource/Full_text_search" id="link-id0x1b330ff8">full text search</a>, entity name lookups, etc.
</li>
</ul>

<h3>What is the DBpedia 3.6 + <a class="auto-href" href="http://virtuoso.openlinksw.com" id="link-id0x1d705780">Virtuoso</a> Cluster Edition Combo?</h3>
<p>
<a class="auto-href" href="http://www.openlinksw.com/dataspace/organization/openlink#this" id="link-id0x1c894338">OpenLink Software</a> has preloaded the DBpedia 3.6 datasets into a preconfigured Virtuoso Cluster Edition database, and made the package available for easy installation.</p> 

<h3>Why is the DBpedia+Virtuoso package important?</h3>
<p>
The DBpedia+Virtuoso package provides a cost-effective option for personal or service-specific incarnations of DBpedia. </p>

<p>For instance, you may have a service that isn&#39;t best-served by competing with the rest of the world for ad-hoc query time and resources on the live instance, which itself operates under various restrictions which enable this ad-hoc query service to be provided at Web Scale.</p>

<p>Now you can easily commission your own instance and quickly exploit DBpedia and Virtuoso&#39;s database feature set to the max, powered by your own hardware and network infrastructure. 
</p>
 
<h3>How do I use the DBpedia+Virtuoso package?</h3>

<p>Pre-requisites are simply:</p>
<ol>
<li>
<a href="http://wikis.openlinksw.com/dataspace/owiki/wiki/VirtuosoWikiWeb/VirtuosoInstallConfig" id="link-id0x19e3e450">Functional Virtuoso Cluster Edition installation</a>.
</li>
<li>
<a href="http://virtuoso.openlinksw.com/pricing/" id="link-id0x1b703ad8">Virtuoso Cluster Edition License</a>.
</li>
<li>90 GB of free disk space -- you ultimately only need 43 gigs, but this our recommended free disk space size pre installation completion.</li>
</ol>
<p>
To install the Virtuoso Cluster Edition simply perform the following steps:
</p>
<ol>
<li>
<a href="http://virtuoso.openlinksw.com/download/" id="link-id0x17b41648">Download Software</a>.
</li>
<li>
Run installer
</li>
<li>
<p>Set key environment variables and start the OpenLink License Manager, using command (this may vary depending on your shell): </p>
<blockquote>
    <code>. /opt/virtuoso/virtuoso-enterprise.sh</code>
  </blockquote>
</li>
<li>
Run the <code>mkcluster.sh</code> script which defaults to a 4 node cluster 
</li>
<li>
Set <code>VIRTUOSO_HOME</code> environment variable -- if you want to start cluster databases distinct from single server databases via distinct root directory for database files (one that isn&#39;t adjacent to single-server database directories) 
</li>
<li>
Start Virtuoso Cluster Edition instances using command: 
<blockquote>
    <code>virtuoso-start.sh</code>
  </blockquote>
</li>
<li>
Stop Virtuoso Cluster Edition instances using command: 
<blockquote>
    <code>virtuoso-stop.sh</code>
  </blockquote>
</li>
</ol>

<p>To install your personal or service specific edition of DBpedia simply perform the following steps:</p>
<ol>
<li>
Navigate to your installation directory
</li>
<li>
Download Installer script (<code><a href="https://s3.amazonaws.com/dbpedia-36-usa/dbpedia-install.sh" id="link-id0x1da0c978">dbpedia-install.sh</a></code>)
</li>
<li>
Set execution mode on script using command: 
<blockquote>
    <code>chmod 755 dbpedia-install.sh </code>
  </blockquote>
</li>
<li>
Shutdown any Virtuoso instances that may be currently running
</li>
<li>
Set your <code>VIRTUOSO_HOME</code> environment variable, e.g., to the current directory, via command (this may vary depending on your shell): 
<blockquote>
    <code>export VIRTUOSO_HOME=`pwd`</code>
  </blockquote>
</li>
<li>
Run script using command: 
<blockquote>
    <code>sh dbpedia-install.sh</code>
  </blockquote>
</li>
</ol>
<p>
Once the installation completes (approximately 1 hour and 30 minutes from start time), perform the following steps:
</p>
<ol>
<li>
Verify that the Virtuoso Conductor (HTML based Admin UI) is in place via: 
<blockquote>
    <code>http://localhost:[port]/conductor</code>
  </blockquote>
</li>
<li>
Verify that the Precision Search &amp; Find UI is in place via: 
<blockquote>
    <code>http://localhost:[port]/fct</code>
  </blockquote>
</li>
<li>Verify that DBpedia&#39;s Green Entity Description Pages are in place via: 
<blockquote>
    <code>http://localhost:[port]/resource/DBpedia</code>
  </blockquote>
</li>
</ol>

<h3>Related</h3>
<ul>
<li>
  <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtAWSDBpedia351C" id="link-id0x1d819b90">Amazon EC2 Snapshots for DBpedia 3.6 &amp; 3.5</a>
</li>
<li>
<a href="http://virtuoso.openlinksw.com/download/" id="link-id0x1c3e27c8">Virtuoso Commercial Edition Download Page</a>
</li>
<li>
<a href="http://docs.openlinksw.com/virtuoso/clusterstcnf.html" id="link-id0x1d0ff170">Virtuoso Cluster Edition Guide</a>
</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1594" id="link-id0x1c891cf8">What is the DBpedia Project?</a>
</li>
</ul>





]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1653">
  <rss:title>SPARQL Guide for the Javascript Developer </rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1653</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1653</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1653</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2011-01-21T19:59:49Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">What? A simple guide usable by any Javascript developer seeking to exploit SPARQL without hassles. Why? SPARQL is a powerful query language, results serialization format, and an HTTP based data access protocol from the W3C. It provides a mechanism for accessing and integrating data across Deductive Database Systems (colloquially referred to as triple or quad stores in Semantic Web and Linked Data circles) -- database systems (or data spaces) that manage proposition oriented records in 3-tuple (triples) or 4-tuple (quads) form. How? SPARQL queries are actually HTTP payloads (typically). Thus, using a RESTful client-server interaction pattern, you can dispatch calls to a SPARQL compliant data server and receive a payload for local processing. Steps: Determine which SPARQL endpoint you want to access e.g. DBpedia or a local Virtuoso instance (typically: http://localhost:8890/sparql). If using Virtuoso, and you want to populate its quad store using SPARQL, assign &quot;SPARQL_SPONGE&quot; privileges to user &quot;SPARQL&quot; (this is basic control, more sophisticated WebID based ACLs are available for controlling SPARQL access). Script: /* Demonstrating use of a single query to populate a # Virtuoso Quad Store via Javascript. */ /* HTTP URL is constructed accordingly with JSON query results format as the default via mime type. */ function sparqlQuery(query, baseURL, format) { if(!format) format=&quot;application/json&quot;; var params={ &quot;default-graph&quot;: &quot;&quot;, &quot;should-sponge&quot;: &quot;soft&quot;, &quot;query&quot;: query, &quot;debug&quot;: &quot;on&quot;, &quot;timeout&quot;: &quot;&quot;, &quot;format&quot;: format, &quot;save&quot;: &quot;display&quot;, &quot;fname&quot;: &quot;&quot; }; var querypart=&quot;&quot;; for(var k in params) { querypart+=k+&quot;=&quot;+encodeURIComponent(params[k])+&quot;&amp;&quot;; } var queryURL=baseURL + &#39;?&#39; + querypart; if (window.XMLHttpRequest) { xmlhttp=new XMLHttpRequest(); } else { xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;); } xmlhttp.open(&quot;GET&quot;,queryURL,false); xmlhttp.send(); return JSON.parse(xmlhttp.responseText); } /* setting Data Source Name (DSN) */ var dsn=&quot;http://dbpedia.org/resource/DBpedia&quot;; /* Virtuoso pragma &quot;DEFINE get:soft &quot;replace&quot; instructs Virtuoso SPARQL engine to perform an HTTP GET using the IRI in FROM clause as Data Source URL with regards to DBMS record inserts */ var query=&quot;DEFINE get:soft \&quot;replace\&quot;\nSELECT DISTINCT * FROM &lt;&quot;+dsn+&quot;&gt; WHERE {?s ?p ?o}&quot;; var data=sparqlQuery(query, &quot;/sparql/&quot;); Output Place the snippet above into the &lt;script/&gt; section of an HTML document to see the query result. Conclusion JSON was chosen over XML (re. output format) since this is about a &quot;no-brainer installation and utilization&quot; guide for a Javascript developer that already knows how to use Javascript for HTTP based data access within HTML. SPARQL just provides an added bonus to URL dexterity (delivered via URI abstraction) with regards to constructing Data Source Names or Addresses. Related SPARQL Guide for the PHP Developer SPARQL Guide for the Python Developer SPARQL Guide for the Ruby Developer Simple Guide for using SPARQL with Virtuoso General SPARQL Tutorial Collection Virtuoso Specific SPARQL Tutorial Collection The URI, URL, and Linked Data Meme&#39;s Generic HTTP URI.</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<h3>What?</h3> 
<p>A simple guide usable by any Javascript developer seeking to exploit <a class="auto-href" href="http://dbpedia.org/resource/SPARQL" id="link-id0x17b447e8">SPARQL</a> without hassles.</p>

<h3>Why?</h3>
<p>SPARQL is a powerful query language, results serialization format, and an HTTP based <a href="http://dbpedia.org/resource/Data">data</a> access protocol from the W3C. It provides a mechanism for accessing and integrating data across <a href="http://en.wikipedia.org/wiki/Deductive_database" id="link-id0x1cc76540">Deductive Database Systems</a> (colloquially referred to as triple or quad stores in <a class="auto-href" href="http://dbpedia.org/resource/Semantic_Web" id="link-id0x1d944d78">Semantic Web</a> and <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x1c7a87c8">Linked Data</a> circles) -- database systems (or data spaces) that manage proposition oriented records in 3-tuple (triples) or 4-tuple (quads) form. </p>

<h3>How?</h3>
<p>SPARQL queries are actually HTTP payloads (typically). Thus, using a RESTful client-server interaction pattern, you can dispatch calls to a SPARQL compliant data server and receive a payload for local processing.</p>

<h4>Steps:</h4>
<ol>
<li>Determine which SPARQL endpoint you want to access e.g. <a href="http://dbpedia.org/sparql" id="link-id0x1d476520">DBpedia</a> or a local <a class="auto-href" href="http://virtuoso.openlinksw.com" id="link-id0x1bcfe140">Virtuoso</a> instance (typically: http://localhost:8890/sparql).
</li>
<li>If using Virtuoso, and you want to populate its quad store using SPARQL, assign &quot;<a href="http://docs.openlinksw.com/virtuoso/rdfsparql.html#rdfsupportedprotocolendpointuri" id="link-id0x1c7630b8">SPARQL_SPONGE</a>&quot; privileges to user &quot;SPARQL&quot; (this is basic control, more sophisticated WebID based ACLs are available for controlling SPARQL access).</li>
</ol>

<h4>Script:</h4>

<pre>
/*
Demonstrating use of a single query to populate a # Virtuoso Quad Store via Javascript. 
*/

/* 
HTTP <a href="http://dbpedia.org/resource/Uniform_Resource_Locator" id="link-id0x1bc27a18">URL</a> is constructed accordingly with JSON query results format as the default via mime type.
*/

function sparqlQuery(query, baseURL, format) {
	if(!format)
		format=&quot;application/json&quot;;
	var params={
		&quot;default-graph&quot;: &quot;&quot;, &quot;should-sponge&quot;: &quot;soft&quot;, &quot;query&quot;: query,
		&quot;debug&quot;: &quot;on&quot;, &quot;timeout&quot;: &quot;&quot;, &quot;format&quot;: format,
		&quot;save&quot;: &quot;display&quot;, &quot;fname&quot;: &quot;&quot;
	};
	
	var querypart=&quot;&quot;;
	for(var k in params) {
		querypart+=k+&quot;=&quot;+encodeURIComponent(params[k])+&quot;&amp;&quot;;
	}
	var queryURL=baseURL + &#39;?&#39; + querypart;
	if (window.XMLHttpRequest) {
  	xmlhttp=new XMLHttpRequest();
  }
  else {
  	xmlhttp=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
  }
  xmlhttp.open(&quot;GET&quot;,queryURL,false);
  xmlhttp.send();
  return JSON.parse(xmlhttp.responseText);
}

/*
setting Data Source Name (DSN)
*/

var dsn=&quot;http://dbpedia.org/resource/DBpedia&quot;;

/*
Virtuoso pragma &quot;DEFINE get:soft &quot;replace&quot; instructs Virtuoso SPARQL engine to perform an HTTP GET using the IRI in FROM clause as Data Source URL with regards to 
DBMS record inserts
*/

var query=&quot;DEFINE get:soft \&quot;replace\&quot;\nSELECT DISTINCT * FROM &lt;&quot;+dsn+&quot;&gt; WHERE {?s ?p ?o}&quot;; 
var data=sparqlQuery(query, &quot;/sparql/&quot;);
</pre>
<h4>Output</h4>
<p>
Place the snippet above into the &lt;script/&gt; section of an HTML document to see the <a href="http://twitpic.com/3s2vs3/full" id="link-id0x1cff2288">query result</a>.
</p>
<h3>Conclusion</h3>
<p>
JSON was chosen over XML (re. output format) since this is about a &quot;no-brainer installation and utilization&quot; guide for a Javascript developer that already knows how to use Javascript for HTTP based data access within HTML. SPARQL just provides an added bonus to URL dexterity (delivered via <a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Identifier" id="link-id0x1d29da98">URI</a> abstraction) with regards to constructing Data Source Names or Addresses.</p>
<h3>Related</h3>
<ul>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1652" id="link-id0x1b0ffb28">SPARQL Guide for the PHP Developer</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1651" id="link-id0x1a8c5ae0">SPARQL Guide for the Python Developer</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1648" id="link-id0x1b86ad28">SPARQL Guide for the Ruby Developer</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1646" id="link-id0x1c7af188">Simple Guide for using SPARQL with Virtuoso</a> 
</li>
<li>
  <a href="http://www.delicious.com/kidehen/sparql_tutorial" id="link-id0x1ac1ba48">General SPARQL Tutorial Collection</a> </li>
<li>
  <a href="http://www.delicious.com/kidehen/virtuoso_sparql_tutorial" id="link-id0x1c7be660">Virtuoso Specific SPARQL Tutorial Collection</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1567" id="link-id0x1c52b438">The URI, URL, and Linked Data Meme&#39;s Generic HTTP URI</a>.
</li>
</ul>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1652">
  <rss:title>SPARQL Guide for the PHP Developer</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1652</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1652</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1652</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2011-01-20T21:25:49Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">What? A simple guide usable by any PHP developer seeking to exploit SPARQL without hassles. Why? SPARQL is a powerful query language, results serialization format, and an HTTP based data access protocol from the W3C. It provides a mechanism for accessing and integrating data across Deductive Database Systems (colloquially referred to as triple or quad stores in Semantic Web and Linked Data circles) -- database systems (or data spaces) that manage proposition oriented records in 3-tuple (triples) or 4-tuple (quads) form. How? SPARQL queries are actually HTTP payloads (typically). Thus, using a RESTful client-server interaction pattern, you can dispatch calls to a SPARQL compliant data server and receive a payload for local processing e.g. local object binding re. PHP. Steps: From your command line execute: aptitude search &#39;^PHP26&#39;, to verify PHP is in place Determine which SPARQL endpoint you want to access e.g. DBpedia or a local Virtuoso instance (typically: http://localhost:8890/sparql). If using Virtuoso, and you want to populate its quad store using SPARQL, assign &quot;SPARQL_SPONGE&quot; privileges to user &quot;SPARQL&quot; (this is basic control, more sophisticated WebID based ACLs are available for controlling SPARQL access). Script: #!/usr/bin/env php &lt;?php # # Demonstrating use of a single query to populate a # Virtuoso Quad Store via PHP. # # HTTP URL is constructed accordingly with JSON query results format in mind. function sparqlQuery($query, $baseURL, $format=&quot;application/json&quot;) { $params=array( &quot;default-graph&quot; =&gt; &quot;&quot;, &quot;should-sponge&quot; =&gt; &quot;soft&quot;, &quot;query&quot; =&gt; $query, &quot;debug&quot; =&gt; &quot;on&quot;, &quot;timeout&quot; =&gt; &quot;&quot;, &quot;format&quot; =&gt; $format, &quot;save&quot; =&gt; &quot;display&quot;, &quot;fname&quot; =&gt; &quot;&quot; ); $querypart=&quot;?&quot;; foreach($params as $name =&gt; $value) { $querypart=$querypart . $name . &#39;=&#39; . urlencode($value) . &quot;&amp;&quot;; } $sparqlURL=$baseURL . $querypart; return json_decode(file_get_contents($sparqlURL)); }; # Setting Data Source Name (DSN) $dsn=&quot;http://dbpedia.org/resource/DBpedia&quot;; #Virtuoso pragmas for instructing SPARQL engine to perform an HTTP GET #using the IRI in FROM clause as Data Source URL $query=&quot;DEFINE get:soft \&quot;replace\&quot; SELECT DISTINCT * FROM &lt;$dsn&gt; WHERE {?s ?p ?o}&quot;; $data=sparqlQuery($query, &quot;http://localhost:8890/sparql/&quot;); print &quot;Retrieved data:\n&quot; . json_encode($data); ?&gt; Output Retrieved data: {&quot;head&quot;: {&quot;link&quot;:[],&quot;vars&quot;:[&quot;s&quot;,&quot;p&quot;,&quot;o&quot;]}, &quot;results&quot;: {&quot;distinct&quot;:false,&quot;ordered&quot;:true, &quot;bindings&quot;:[ {&quot;s&quot;: {&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/dbpedia.org\/resource\/DBpedia&quot;},&quot;p&quot;: {&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type&quot;},&quot;o&quot;: {&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/www.w3.org\/2002\/07\/owl#Thing&quot;}}, {&quot;s&quot;: {&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/dbpedia.org\/resource\/DBpedia&quot;},&quot;p&quot;: {&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type&quot;},&quot;o&quot;: {&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/dbpedia.org\/ontology\/Work&quot;}}, {&quot;s&quot;: {&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/dbpedia.org\/resource\/DBpedia&quot;},&quot;p&quot;: {&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type&quot;},&quot;o&quot;: {&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/dbpedia.org\/class\/yago\/Software106566077&quot;}}, ... Conclusion JSON was chosen over XML (re. output format) since this is about a &quot;no-brainer installation and utilization&quot; guide for a PHP developer that already knows how to use PHP for HTTP based data access. SPARQL just provides an added bonus to URL dexterity (delivered via URI abstraction) with regards to constructing Data Source Names or Addresses. Related SPARQL Guide for the Python Developer SPARQL Guide for the Ruby Developer Simple Guide for using SPARQL with Virtuoso General SPARQL Tutorial Collection Virtuoso Specific SPARQL Tutorial Collection The URI, URL, and Linked Data Meme&#39;s Generic HTTP URI.</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<h3>What?</h3> 
<p>A simple guide usable by any <a class="auto-href" href="http://dbpedia.org/resource/PHP_programming_language" id="link-id0x1bdca7b8">PHP</a> developer seeking to exploit <a class="auto-href" href="http://dbpedia.org/resource/SPARQL" id="link-id0x1c894338">SPARQL</a> without hassles.</p>

<h3>Why?</h3>
<p>SPARQL is a powerful query language, results serialization format, and an HTTP based <a href="http://dbpedia.org/resource/Data">data</a> access protocol from the W3C. It provides a mechanism for accessing and integrating data across <a href="http://en.wikipedia.org/wiki/Deductive_database" id="link-id0x1c319af0">Deductive Database Systems</a> (colloquially referred to as triple or quad stores in <a class="auto-href" href="http://dbpedia.org/resource/Semantic_Web" id="link-id0x1d944d78">Semantic Web</a> and <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x1c7a87c8">Linked Data</a> circles) -- database systems (or data spaces) that manage proposition oriented records in 3-tuple (triples) or 4-tuple (quads) form. </p>

<h3>How?</h3>
<p>SPARQL queries are actually HTTP payloads (typically). Thus, using a RESTful client-server interaction pattern, you can dispatch calls to a SPARQL compliant data server and receive a payload for local processing e.g. local object binding re. PHP.</p>

<h4>Steps:</h4>
<ol>
<li>
From your command line execute: aptitude search &#39;^PHP26&#39;, to verify PHP is in place
</li>
<li>Determine which SPARQL endpoint you want to access e.g. <a href="http://dbpedia.org/sparql" id="link-id0x1d476520">DBpedia</a> or a local <a class="auto-href" href="http://virtuoso.openlinksw.com" id="link-id0x1bcfe140">Virtuoso</a> instance (typically: http://localhost:8890/sparql).
</li>
<li>If using Virtuoso, and you want to populate its quad store using SPARQL, assign &quot;<a href="http://docs.openlinksw.com/virtuoso/rdfsparql.html#rdfsupportedprotocolendpointuri" id="link-id0x1c7630b8">SPARQL_SPONGE</a>&quot; privileges to user &quot;SPARQL&quot; (this is basic control, more sophisticated WebID based ACLs are available for controlling SPARQL access).</li>
</ol>

<h4>Script:</h4>

<pre>
#!/usr/bin/env php
&lt;?php
#
# Demonstrating use of a single query to populate a # Virtuoso Quad Store via PHP. 
#

# HTTP <a href="http://dbpedia.org/resource/Uniform_Resource_Locator" id="link-id0x1ce1d6d8">URL</a> is constructed accordingly with JSON query results format in mind.

function sparqlQuery($query, $baseURL, $format=&quot;application/json&quot;)

  {
	$params=array(
		&quot;default-graph&quot; =&gt;  &quot;&quot;,
		&quot;should-sponge&quot; =&gt;  &quot;soft&quot;,
		&quot;query&quot; =&gt;  $query,
		&quot;debug&quot; =&gt;  &quot;on&quot;,
		&quot;timeout&quot; =&gt;  &quot;&quot;,
		&quot;format&quot; =&gt;  $format,
		&quot;save&quot; =&gt;  &quot;display&quot;,
		&quot;fname&quot; =&gt;  &quot;&quot;
	);

	$querypart=&quot;?&quot;;	
	foreach($params as $name =&gt; $value) 
  {
		$querypart=$querypart . $name . &#39;=&#39; . urlencode($value) . &quot;&amp;&quot;;
	}
	
	$sparqlURL=$baseURL . $querypart;
	
	return json_decode(file_get_contents($sparqlURL));
};



# Setting Data Source Name (DSN)
$dsn=&quot;http://dbpedia.org/resource/DBpedia&quot;;

#Virtuoso pragmas for instructing SPARQL engine to perform an HTTP GET
#using the IRI in FROM clause as Data Source URL

$query=&quot;DEFINE get:soft \&quot;replace\&quot;
SELECT DISTINCT * FROM &lt;$dsn&gt; WHERE {?s ?p ?o}&quot;; 

$data=sparqlQuery($query, &quot;http://localhost:8890/sparql/&quot;);

print &quot;Retrieved data:\n&quot; . json_encode($data);

?&gt;
</pre>
<h4>Output</h4>
<pre>
Retrieved data:
  {&quot;head&quot;:
  {&quot;link&quot;:[],&quot;vars&quot;:[&quot;s&quot;,&quot;p&quot;,&quot;o&quot;]},
  &quot;results&quot;:
		{&quot;distinct&quot;:false,&quot;ordered&quot;:true,
		&quot;bindings&quot;:[
			{&quot;s&quot;:
			{&quot;type&quot;:&quot;<a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Identifier" id="link-id0x1ca44a98">uri</a>&quot;,&quot;value&quot;:&quot;http:\/\/dbpedia.org\/resource\/DBpedia&quot;},&quot;p&quot;:
			{&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type&quot;},&quot;o&quot;:
			{&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/www.w3.org\/2002\/07\/owl#Thing&quot;}},
			{&quot;s&quot;:
			{&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/dbpedia.org\/resource\/DBpedia&quot;},&quot;p&quot;:
			{&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type&quot;},&quot;o&quot;:
			{&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/dbpedia.org\/ontology\/Work&quot;}},
			{&quot;s&quot;:
			{&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/dbpedia.org\/resource\/DBpedia&quot;},&quot;p&quot;:
			{&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/www.w3.org\/1999\/02\/22-rdf-syntax-ns#type&quot;},&quot;o&quot;:
			{&quot;type&quot;:&quot;uri&quot;,&quot;value&quot;:&quot;http:\/\/dbpedia.org\/class\/yago\/Software106566077&quot;}},
...
</pre>
<h3>Conclusion</h3>
<p>
JSON was chosen over XML (re. output format) since this is about a &quot;no-brainer installation and utilization&quot; guide for a PHP developer that already knows how to use PHP for HTTP based data access. SPARQL just provides an added bonus to URL dexterity (delivered via URI abstraction) with regards to constructing Data Source Names or Addresses.</p>
<h3>Related</h3>
<ul>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1651" id="link-id0x1a8c5ae0">SPARQL Guide for the Python Developer</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1648" id="link-id0x1b86ad28">SPARQL Guide for the Ruby Developer</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1646" id="link-id0x1c7af188">Simple Guide for using SPARQL with Virtuoso</a> 
</li>
<li>
  <a href="http://www.delicious.com/kidehen/sparql_tutorial" id="link-id0x1ac1ba48">General SPARQL Tutorial Collection</a> </li>
<li>
  <a href="http://www.delicious.com/kidehen/virtuoso_sparql_tutorial" id="link-id0x1c7be660">Virtuoso Specific SPARQL Tutorial Collection</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1567" id="link-id0x1c52b438">The URI, URL, and Linked Data Meme&#39;s Generic HTTP URI</a>.
</li>
</ul>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1651">
  <rss:title>SPARQL Guide for Python Developer</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1651</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1651</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1651</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2011-01-19T17:13:30Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">What? A simple guide usable by any Python developer seeking to exploit SPARQL without hassles. Why? SPARQL is a powerful query language, results serialization format, and an HTTP based data access protocol from the W3C. It provides a mechanism for accessing and integrating data across Deductive Database Systems (colloquially referred to as triple or quad stores in Semantic Web and Linked Data circles) -- database systems (or data spaces) that manage proposition oriented records in 3-tuple (triples) or 4-tuple (quads) form. How? SPARQL queries are actually HTTP payloads (typically). Thus, using a RESTful client-server interaction pattern, you can dispatch calls to a SPARQL compliant data server and receive a payload for local processing e.g. local object binding re. Python. Steps: From your command line execute: aptitude search &#39;^python26&#39;, to verify Python is in place Determine which SPARQL endpoint you want to access e.g. DBpedia or a local Virtuoso instance (typically: http://localhost:8890/sparql). If using Virtuoso, and you want to populate its quad store using SPARQL, assign &quot;SPARQL_SPONGE&quot; privileges to user &quot;SPARQL&quot; (this is basic control, more sophisticated WebID based ACLs are available for controlling SPARQL access). Script: #!/usr/bin/env python # # Demonstrating use of a single query to populate a # Virtuoso Quad Store via Python. # import urllib, json # HTTP URL is constructed accordingly with JSON query results format in mind. def sparqlQuery(query, baseURL, format=&quot;application/json&quot;): params={ &quot;default-graph&quot;: &quot;&quot;, &quot;should-sponge&quot;: &quot;soft&quot;, &quot;query&quot;: query, &quot;debug&quot;: &quot;on&quot;, &quot;timeout&quot;: &quot;&quot;, &quot;format&quot;: format, &quot;save&quot;: &quot;display&quot;, &quot;fname&quot;: &quot;&quot; } querypart=urllib.urlencode(params) response = urllib.urlopen(baseURL,querypart).read() return json.loads(response) # Setting Data Source Name (DSN) dsn=&quot;http://dbpedia.org/resource/DBpedia&quot; # Virtuoso pragmas for instructing SPARQL engine to perform an HTTP GET # using the IRI in FROM clause as Data Source URL query=&quot;&quot;&quot;DEFINE get:soft &quot;replace&quot; SELECT DISTINCT * FROM &lt;%s&gt; WHERE {?s ?p ?o}&quot;&quot;&quot; % dsn data=sparqlQuery(query, &quot;http://localhost:8890/sparql/&quot;) print &quot;Retrieved data:\n&quot; + json.dumps(data, sort_keys=True, indent=4) # # End Output Retrieved data: { &quot;head&quot;: { &quot;link&quot;: [], &quot;vars&quot;: [ &quot;s&quot;, &quot;p&quot;, &quot;o&quot; ] }, &quot;results&quot;: { &quot;bindings&quot;: [ { &quot;o&quot;: { &quot;type&quot;: &quot;uri&quot;, &quot;value&quot;: &quot;http://www.w3.org/2002/07/owl#Thing&quot; }, &quot;p&quot;: { &quot;type&quot;: &quot;uri&quot;, &quot;value&quot;: &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&quot; }, &quot;s&quot;: { &quot;type&quot;: &quot;uri&quot;, &quot;value&quot;: &quot;http://dbpedia.org/resource/DBpedia&quot; } }, ... Conclusion JSON was chosen over XML (re. output format) since this is about a &quot;no-brainer installation and utilization&quot; guide for a Python developer that already knows how to use Python for HTTP based data access. SPARQL just provides an added bonus to URL dexterity (delivered via URI abstraction) with regards to constructing Data Source Names or Addresses. Related SPARQL Guide for the Ruby Developer Simple Guide for using SPARQL with Virtuoso General SPARQL Tutorial Collection Virtuoso Specific SPARQL Tutorial Collection The URI, URL, and Linked Data Meme&#39;s Generic HTTP URI.</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<h3>What?</h3> 
<p>A simple guide usable by any <a class="auto-href" href="http://dbpedia.org/resource/Python_programming_language" id="link-id0x1bdca7b8">Python</a> developer seeking to exploit <a class="auto-href" href="http://dbpedia.org/resource/SPARQL" id="link-id0x1c894338">SPARQL</a> without hassles.</p>

<h3>Why?</h3>
<p>SPARQL is a powerful query language, results serialization format, and an HTTP based <a href="http://dbpedia.org/resource/Data">data</a> access protocol from the W3C. It provides a mechanism for accessing and integrating data across <a href="http://en.wikipedia.org/wiki/Deductive_database" id="link-id0x1c319af0">Deductive Database Systems</a> (colloquially referred to as triple or quad stores in <a class="auto-href" href="http://dbpedia.org/resource/Semantic_Web" id="link-id0x1d944d78">Semantic Web</a> and <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x1c7a87c8">Linked Data</a> circles) -- database systems (or data spaces) that manage proposition oriented records in 3-tuple (triples) or 4-tuple (quads) form. </p>

<h3>How?</h3>
<p>SPARQL queries are actually HTTP payloads (typically). Thus, using a RESTful client-server interaction pattern, you can dispatch calls to a SPARQL compliant data server and receive a payload for local processing e.g. local object binding re. Python.</p>

<h4>Steps:</h4>
<ol>
<li>
From your command line execute: aptitude search &#39;^python26&#39;, to verify Python is in place
</li>
<li>Determine which SPARQL endpoint you want to access e.g. <a href="http://dbpedia.org/sparql" id="link-id0x1d476520">DBpedia</a> or a local <a class="auto-href" href="http://virtuoso.openlinksw.com" id="link-id0x1bcfe140">Virtuoso</a> instance (typically: http://localhost:8890/sparql).
</li>
<li>If using Virtuoso, and you want to populate its quad store using SPARQL, assign &quot;<a href="http://docs.openlinksw.com/virtuoso/rdfsparql.html#rdfsupportedprotocolendpointuri" id="link-id0x1c7630b8">SPARQL_SPONGE</a>&quot; privileges to user &quot;SPARQL&quot; (this is basic control, more sophisticated WebID based ACLs are available for controlling SPARQL access).</li>
</ol>

<h4>Script:</h4>

<pre>
#!/usr/bin/env python
#
# Demonstrating use of a single query to populate a # Virtuoso Quad Store via Python. 
#

import urllib, json

# HTTP <a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Locator" id="link-id0x1bd91cf0">URL</a> is constructed accordingly with JSON query results format in mind.

def sparqlQuery(query, baseURL, format=&quot;application/json&quot;):
	params={
		&quot;default-graph&quot;: &quot;&quot;,
		&quot;should-sponge&quot;: &quot;soft&quot;,
		&quot;query&quot;: query,
		&quot;debug&quot;: &quot;on&quot;,
		&quot;timeout&quot;: &quot;&quot;,
		&quot;format&quot;: format,
		&quot;save&quot;: &quot;display&quot;,
		&quot;fname&quot;: &quot;&quot;
	}
	querypart=urllib.urlencode(params)
	response = urllib.urlopen(baseURL,querypart).read()
	return json.loads(response)

# Setting Data Source Name (DSN)
dsn=&quot;http://dbpedia.org/resource/DBpedia&quot;

# Virtuoso pragmas for instructing SPARQL engine to perform an HTTP GET
# using the IRI in FROM clause as Data Source URL

query=&quot;&quot;&quot;DEFINE get:soft &quot;replace&quot;
SELECT DISTINCT * FROM &lt;%s&gt; WHERE {?s ?p ?o}&quot;&quot;&quot; % dsn 

data=sparqlQuery(query, &quot;http://localhost:8890/sparql/&quot;)

print &quot;Retrieved data:\n&quot; + json.dumps(data, sort_keys=True, indent=4)

#
# End
</pre>
<h4>Output</h4>
<pre>
Retrieved data:
{
    &quot;head&quot;: {
        &quot;link&quot;: [], 
        &quot;vars&quot;: [
            &quot;s&quot;, 
            &quot;p&quot;, 
            &quot;o&quot;
        ]
    }, 
    &quot;results&quot;: {
        &quot;bindings&quot;: [
            {
                &quot;o&quot;: {
                    &quot;type&quot;: &quot;<a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Identifier" id="link-id0x1b1470b8">uri</a>&quot;, 
                    &quot;value&quot;: &quot;http://www.w3.org/2002/07/owl#Thing&quot;
                }, 
                &quot;p&quot;: {
                    &quot;type&quot;: &quot;uri&quot;, 
                    &quot;value&quot;: &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&quot;
                }, 
                &quot;s&quot;: {
                    &quot;type&quot;: &quot;uri&quot;, 
                    &quot;value&quot;: &quot;http://dbpedia.org/resource/DBpedia&quot;
                }
            }, 
...
</pre>
<h3>Conclusion</h3>
<p>
JSON was chosen over XML (re. output format) since this is about a &quot;no-brainer installation and utilization&quot; guide for a Python developer that already knows how to use Python for HTTP based data access. SPARQL just provides an added bonus to URL dexterity (delivered via URI abstraction) with regards to constructing Data Source Names or Addresses.</p>
<h3>Related</h3>
<ul>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1648" id="link-id0x1c9e26b0">SPARQL Guide for the Ruby Developer</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1646" id="link-id0x1c7af188">Simple Guide for using SPARQL with Virtuoso</a> 
</li>
<li>
  <a href="http://www.delicious.com/kidehen/sparql_tutorial" id="link-id0x1ac1ba48">General SPARQL Tutorial Collection</a> </li>
<li>
  <a href="http://www.delicious.com/kidehen/virtuoso_sparql_tutorial" id="link-id0x1c7be660">Virtuoso Specific SPARQL Tutorial Collection</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1567" id="link-id0x1c52b438">The URI, URL, and Linked Data Meme&#39;s Generic HTTP URI</a>.
</li>
</ul>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1646">
  <rss:title>Rough draft poem: Document, what art thou?</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1646</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1646</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1646</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2010-11-11T18:44:36Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">I am the Data Container, Disseminator, and Canvas. I came to be when the cognitive skills of mankind deemed oral history inadequate. I am transcendent, I take many forms, but my core purpose is constant - Container, Disseminator, and Canvas. I am dexterous, so I can be blank, partitioned horizontally, horizontally and vertically, and if you get moi excited and I&#39;ll show you fractals. I am accessible in a number of ways, across a plethora of media. I am loose, so you can access my content too. I am loose in a cool way, so you can refer to moi independent of my content. I am cool in a loose way, so you can refer to my content independent of moi. I am even cool and loose enough to let you figure out stuff from my content including how its totally distinct from moi. But... I am possessive about my coolness, so all Containment, Dissemination, and Canvas requirements must first call upon moi, wherever I might be. So... If you postulate about my demise or irrelevance, across any medium, I will punish you with confusion! Remember... I just told you who I am. Lesson to be learned.. When something tells you what it is, and it is as powerful as I, best you believe it. BTW -- I am Okay with HTTP response code 200 OK :-)</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<em>I am the <a href="http://dbpedia.org/resource/Data">Data</a> Container, Disseminator, and Canvas.<br />

I came to be when the cognitive skills of mankind deemed oral history inadequate.<br />

I am transcendent, I take many forms, but my core purpose is constant - Container, Disseminator, and Canvas.<br />

I am dexterous, so I can be blank, partitioned horizontally, horizontally and vertically, and if you get moi excited and I&#39;ll show you fractals.<br />

I am accessible in a number of ways, across a plethora of media.<br />

I am loose, so you can access my content too.<br />

I am loose in a cool way, so you can refer to moi independent of my content.<br />

I am cool in a loose way, so you can refer to my content independent of moi.<br />

I am even cool and loose enough to let you figure out stuff from my content including how its totally distinct from moi.<br />

<strong>But...</strong>
<br />

I am possessive about my coolness, so all Containment, Dissemination, and Canvas requirements must first call upon moi, wherever I might be.<br />

<strong>So...</strong>
<br />

If you postulate about my demise or irrelevance, across any medium, I will punish you with confusion!<br />

<strong>Remember...</strong>
<br />

I just told you who I am. <br />


<strong>Lesson to be learned..</strong>
<br />

When something tells you what it is, and it is as powerful as I, best you believe it.<br />

BTW -- I am Okay with HTTP response code 200 OK :-)
</em>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1644">
  <rss:title>7 Things Brought to You by HTTP-based Hypermedia</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1644</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1644</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1644</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2010-11-08T21:43:28Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">There are some very powerful benefits that accrue from the use of HTTP based Hypermedia. 7 that come to mind immediately include: Structured &amp; Platform Independent Enterprise Data Virtualization -- concrete conceptual level access and provisioning of abstract domain entities such as Customers, Orders, Employees, Products, Countries, Competitors etc. Distributed Application State (REST) -- application state transitions via links Structured Data Representation (Linked Data) -- whole data data representation via links Structured Identity (WebID) -- verifiable distributed identity Structured Profiles (FOAF) -- platform independent profiles for people and organizations Articulation of Structured Value Propositions (GoodRelations) -- Product &amp; Service Offers, Business Entities, Locations, Business Hours, etc. Structured Collaboration Spaces (SIOC) -- Blogs, Wikis, File Sharing, Discussion Forums, Aggregated Feeds, Statuses, Photo Galleries, Polls etc.</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>There are some very powerful benefits that accrue from the use of <a href="http://dbpedia.org/resource/Hypertext_Transfer_Protocol" id="link-id0x1b498648">HTTP</a> based <a href="http://dbpedia.org/resource/Hypermedia" id="link-id0x1be1e208">Hypermedia</a>. 7 that come to mind immediately include:
</p>
<ol>
<li>Structured &amp; Platform Independent Enterprise <a class="auto-href" href="http://dbpedia.org/resource/Federated_database_system" id="link-id0x1ab5d6c8">Data Virtualization</a> -- concrete conceptual level access and provisioning of abstract domain entities such as Customers, Orders, Employees, Products, Countries, Competitors etc.</li>
<li>Distributed Application State (<a href="http://dbpedia.org/resource/Representational_State_Transfer" id="link-id0x1a8a0e38">REST</a>) -- application state transitions via links</li>
<li>
Structured Data Representation (<a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x1acf1aa0">Linked Data</a>) -- whole data data representation via links
</li>
<li>
Structured Identity (<a href="http://esw.w3.org/WebID" id="link-id0x1a484548">WebID</a>) -- verifiable distributed identity 
</li>
<li>
Structured Profiles (<a class="auto-href" href="http://dbpedia.org/resource/Friend_of_a_friend" id="link-id0xa00bca8">FOAF</a>) -- platform independent profiles for people and organizations
</li>
<li>
Articulation of Structured Value Propositions (<a href="http://www.heppnetz.de/projects/goodrelations/" id="link-id0x1a4793d0">GoodRelations</a>) -- Product &amp; Service Offers, Business Entities, Locations, Business Hours, etc.
</li>
<li>
Structured Collaboration Spaces (<a href="http://rdfs.org/sioc/spec/" id="link-id0x1afb8b40">SIOC</a>) -- Blogs, Wikis, File Sharing, Discussion Forums, Aggregated Feeds, Statuses, Photo Galleries, Polls etc.</li>

</ol>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1641">
  <rss:title>Virtuoso Linked Data Deployment 3-Step</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1641</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1641</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1641</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2010-10-29T22:54:32Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">Injecting Linked Data into the Web has been a major pain point for those who seek personal, service, or organization-specific variants of DBpedia. Basically, the sequence goes something like this: You encounter DBpedia or the LOD Cloud Pictorial. You look around (typically following your nose from link to link). You attempt to publish your own stuff. You get stuck. The problems typically take the following form: Functionality confusion about the complementary Name and Address functionality of a single URI abstraction Terminology confusion due to conflation and over-loading of terms such as Resource, URL, Representation, Document, etc. Inability to find robust tools with which to generate Linked Data from existing data sources such as relational databases, CSV files, XML, Web Services, etc. To start addressing these problems, here is a simple guide for generating and publishing Linked Data using Virtuoso. Step 1 - RDF Data Generation Existing RDF data can be added to the Virtuoso RDF Quad Store via a variety of built-in data loader utilities. Many options allow you to easily and quickly generate RDF data from other data sources: Install the Sponger Bookmarklet for the URIBurner service. Bind this to your own SPARQL-compliant backend RDF database (in this scenario, your local Virtuoso instance), and then Sponge some HTTP-accessible resources. Convert relational DBMS data to RDF using the Virtuoso RDF Views Wizard. Starting with CSV files, you can Place them at an HTTP-accessible location, and use the Virtuoso Sponger to convert them to RDF or; Use the CVS import feature to import their content into Virtuoso&#39;s relational data engine; then use the built-in RDF Views Wizard as with other RDBMS data. Starting from XML files, you can Use Virtuoso&#39;s inbuilt XSLT-Processor for manual XML to RDF/XML transformation or; Leverage the Sponger Cartridge for GRDDL, if there is a transformation service associated with your XML data source, or; Let the Sponger analyze the XML data source and make a best-effort transformation to RDF. Step 2 - Linked Data Deployment Install the Faceted Browser VAD package (fct_dav.vad) which delivers the following: Faceted Browser Engine UI Dynamic Hypermedia Resource Generator delivers descriptor resources for every entity (data object) in the Native or Virtual Quad Stores supports a broad array of output formats, including HTML+RDFa, RDF/XML, N3/Turtle, NTriples, RDF-JSON, OData+Atom, and OData+JSON. Step 3 - Linked Data Consumption &amp; Exploitation Three simple steps allow you, your enterprise, and your customers to consume and exploit your newly deployed Linked Data -- Load a page like this in your browser: http://&lt;cname&gt;[:&lt;port&gt;]/describe/?uri=&lt;entity-uri&gt; &lt;cname&gt;[:&lt;port&gt;] gets replaced by the host and port of your Virtuoso instance &lt;entity-uri&gt; gets replaced by the URI you want to see described -- for instance, the URI of one of the resources you let the Sponger handle. Follow the links presented in the descriptor page. If you ever see a blank page with a hyperlink subject name in the About: section at the top of the page, simply add the parameter &quot;&amp;sp=1&quot; to the URL in the browser&#39;s Address box, and hit [ENTER]. This will result in an &quot;on the fly&quot; resource retrieval, transformation, and descriptor page generation. Use the navigator controls to page up and down the data associated with the &quot;in scope&quot; resource descriptor. Related Sample Descriptor Page (what you see post completion of the steps in this post) What is Linked Data, really? Painless Linked Data Generation via URIBurner How To Load RDF Data Into Virtuoso (various methods) Virtuoso Bulk Loader Script for RDF Bulk Loader Script for CSV Wizard based generation of RDF based Linked Data from ODBC accessible Relational Databases</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Injecting <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x17012e18">Linked Data</a> into the Web has been a major pain point for those who seek personal, service, or organization-specific variants of <a class="auto-href" href="http://dbpedia.org/resource/DBpedia" id="link-id0x196518a8">DBpedia</a>. Basically, the sequence goes something like this: </p>
<ol>
<li>
You encounter DBpedia or the <a class="auto-href" href="http://community.linkeddata.org/dataspace/organization/lod#this" id="link-id0x1b26d008">LOD</a> Cloud Pictorial.</li>
<li>
You look around (typically following your nose from link to link).
</li>
<li>
You attempt to publish your own stuff.
</li>
<li>
You get stuck.
</li>
</ol>

<p>The problems typically take the following form:</p>
<ol>
<li>
Functionality confusion about the complementary Name and Address functionality of a single <a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Identifier" id="link-id0xa108a00">URI</a> abstraction
</li>
<li>
Terminology confusion due to conflation and over-loading of terms such as Resource, <a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Locator" id="link-id0x1b3d08f8">URL</a>, Representation, Document, etc.
</li>
<li>
Inability to find robust tools with which to generate Linked Data from existing data sources such as relational databases, CSV files, XML, Web Services, etc.
</li>
</ol>

<p>To start addressing these problems, here is a simple guide for generating and publishing Linked Data using <a class="auto-href" href="http://virtuoso.openlinksw.com" id="link-id0x1a7841e0">Virtuoso</a>.</p>

<h3>Step 1 - RDF Data Generation</h3>

<p>Existing RDF data can be added to the Virtuoso RDF Quad Store via a variety of built-in data loader utilities.</p>

<p>Many options allow you to easily and quickly generate RDF data from other data sources:</p>
<ul>
<li>
Install the Sponger Bookmarklet for the <a href="http://uriburner.com" id="link-id0x1aa50800">URIBurner service</a>. Bind this to your own <a class="auto-href" href="http://dbpedia.org/resource/SPARQL" id="link-id0x1a4255e0">SPARQL</a>-compliant backend RDF database (in this scenario, your local Virtuoso instance), and then Sponge some HTTP-accessible resources.
</li>
<li>
Convert relational DBMS data to RDF using the Virtuoso RDF Views Wizard.
</li>
<li>
Starting with CSV files, you can
<ul>
    <li>Place them at an HTTP-accessible location, and use the Virtuoso <a class="auto-href" href="http://virtuoso.openlinksw.com/Whitepapers/html/VirtSpongerWhitePaper.html" id="link-id0x16f7ba58">Sponger</a> to convert them to RDF or;
</li>
<li>
Use the CVS import feature to import their content into Virtuoso&#39;s relational data engine; then use the built-in RDF Views Wizard as with other <a class="auto-href" href="http://dbpedia.org/resource/Relational_database_management_system" id="link-id0x1982ea80">RDBMS</a> data.
</li>
  </ul>
</li>
<li>
Starting from XML files, you can
<ul>
    <li>
Use Virtuoso&#39;s inbuilt XSLT-Processor for manual XML to RDF/XML transformation or;</li>
<li>Leverage the Sponger Cartridge for <a class="auto-href" href="http://dbpedia.org/resource/GRDDL" id="link-id0x1b350968">GRDDL</a>, if there is a transformation service associated with your XML data source, or;</li>
<li>Let the Sponger analyze the XML data source and make a best-effort transformation to RDF.</li>
</ul>
</li>
</ul>


<h3>Step 2 - Linked Data Deployment</h3>
<p>
Install the <a href="http://download.openlinksw.com/packages/6.2/virtuoso/fct_dav.vad" id="link-id0x19845ad0">Faceted Browser VAD package (<code>fct_dav.vad</code>)</a> which delivers the following:</p>
<ol>
<li>
Faceted Browser Engine UI</li>
<li>
Dynamic Hypermedia Resource Generator
<ul>
    <li>delivers descriptor resources for every <a class="auto-href" href="http://dbpedia.org/resource/Entity" id="link-id0x1b3a69f0">entity</a> (data object) in the Native or Virtual Quad Stores</li>
<li>supports a broad array of output formats, including HTML+<a class="auto-href" href="http://dbpedia.org/resource/RDFa" id="link-id0x1a92d2f8">RDFa</a>, RDF/XML, N3/Turtle, NTriples, RDF-JSON, OData+Atom, and OData+JSON.
</li>
  </ul>
</li>
</ol>


<h3>Step 3 - Linked Data Consumption &amp; Exploitation</h3>
<p>
Three simple steps allow you, your enterprise, and your customers to consume and exploit your newly deployed Linked Data --
</p>
<ol>
<li>
Load a page like this in your browser: <code>http://&lt;cname&gt;[:&lt;port&gt;]/describe/?uri=&lt;entity-uri&gt;</code>
<ul>
    <li>
      <code>&lt;cname&gt;[:&lt;port&gt;]</code> gets replaced by the host and port of your Virtuoso instance</li>
<li>
<code>&lt;entity-uri&gt;</code> gets replaced by the URI you want to see described -- for instance, the URI of one of the resources you let the Sponger handle.
</li>
  </ul>
</li>
<li>
Follow the links presented in the descriptor page.
</li>
<li>If you ever see a blank page with a hyperlink subject name in the About: section at the top of the page, simply add the parameter &quot;&amp;sp=1&quot; to the URL in the browser&#39;s Address box, and hit [ENTER].  This will result in an &quot;on the fly&quot; resource retrieval, transformation, and descriptor page generation.</li> 
<li>
Use the navigator controls to page up and down the data associated with the &quot;in scope&quot; resource descriptor.
</li>
</ol>
<h3>Related</h3>
<ul>
<li>
  <a href="http://linkeddata.uriburner.com/describe/?url=http%3A%2F%2Flinkeddata.uriburner.com%2Fabout%2Fid%2Fentity%2Fhttp%2Fwww.amazon.com%2Fo%2FASIN%2F006251587X" id="link-id0x1a8aeaf8">Sample Descriptor Page</a> (what you see post completion of the steps in this post)
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1639" id="link-id0x1af66f38">What is Linked Data, really?</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1613" id="link-id0x1acdbc58">Painless Linked Data Generation via URIBurner</a>
</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtRDFInsert" id="link-id0x1abe3b18">How To Load RDF Data Into Virtuoso</a> (various methods)</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtBulkRDFLoader" id="link-id0x1a441ff0">Virtuoso Bulk Loader Script for RDF</a>
</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtCsvFileBulkLoader" id="link-id0x190382e8">Bulk Loader Script for CSV</a>
</li>
<li>
  <a href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtRdb2RDFViewsGeneration#OneClickLinkedDataGenerationAndDemployment" id="link-id0x1ac9c9c0">Wizard based generation of RDF based Linked Data from ODBC accessible Relational Databases </a>
</li>
</ul>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1642">
  <rss:title>Virtuoso Linked Data Deployment In 3 Simple Steps</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1642</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1642</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1642</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2010-10-29T22:54:32Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">Injecting Linked Data into the Web has been a major pain point for those who seek personal, service, or organization-specific variants of DBpedia. Basically, the sequence goes something like this: You encounter DBpedia or the LOD Cloud Pictorial. You look around (typically following your nose from link to link). You attempt to publish your own stuff. You get stuck. The problems typically take the following form: Functionality confusion about the complementary Name and Address functionality of a single URI abstraction Terminology confusion due to conflation and over-loading of terms such as Resource, URL, Representation, Document, etc. Inability to find robust tools with which to generate Linked Data from existing data sources such as relational databases, CSV files, XML, Web Services, etc. To start addressing these problems, here is a simple guide for generating and publishing Linked Data using Virtuoso. Step 1 - RDF Data Generation Existing RDF data can be added to the Virtuoso RDF Quad Store via a variety of built-in data loader utilities. Many options allow you to easily and quickly generate RDF data from other data sources: Install the Sponger Bookmarklet for the URIBurner service. Bind this to your own SPARQL-compliant backend RDF database (in this scenario, your local Virtuoso instance), and then Sponge some HTTP-accessible resources. Convert relational DBMS data to RDF using the Virtuoso RDF Views Wizard. Starting with CSV files, you can Place them at an HTTP-accessible location, and use the Virtuoso Sponger to convert them to RDF or; Use the CVS import feature to import their content into Virtuoso&#39;s relational data engine; then use the built-in RDF Views Wizard as with other RDBMS data. Starting from XML files, you can Use Virtuoso&#39;s inbuilt XSLT-Processor for manual XML to RDF/XML transformation or; Leverage the Sponger Cartridge for GRDDL, if there is a transformation service associated with your XML data source, or; Let the Sponger analyze the XML data source and make a best-effort transformation to RDF. Step 2 - Linked Data Deployment Install the Faceted Browser VAD package (fct_dav.vad) which delivers the following: Faceted Browser Engine UI Dynamic Hypermedia Resource Generator delivers descriptor resources for every entity (data object) in the Native or Virtual Quad Stores supports a broad array of output formats, including HTML+RDFa, RDF/XML, N3/Turtle, NTriples, RDF-JSON, OData+Atom, and OData+JSON. Step 3 - Linked Data Consumption &amp; Exploitation Three simple steps allow you, your enterprise, and your customers to consume and exploit your newly deployed Linked Data -- Load a page like this in your browser: http://&lt;cname&gt;[:&lt;port&gt;]/describe/?uri=&lt;entity-uri&gt; &lt;cname&gt;[:&lt;port&gt;] gets replaced by the host and port of your Virtuoso instance &lt;entity-uri&gt; gets replaced by the URI you want to see described -- for instance, the URI of one of the resources you let the Sponger handle. Follow the links presented in the descriptor page. If you ever see a blank page with a hyperlink subject name in the About: section at the top of the page, simply add the parameter &quot;&amp;sp=1&quot; to the URL in the browser&#39;s Address box, and hit [ENTER]. This will result in an &quot;on the fly&quot; resource retrieval, transformation, and descriptor page generation. Use the navigator controls to page up and down the data associated with the &quot;in scope&quot; resource descriptor. Related Sample Descriptor Page (what you see post completion of the steps in this post) What is Linked Data, really? Painless Linked Data Generation via URIBurner How To Load RDF Data Into Virtuoso (various methods) Virtuoso Bulk Loader Script for RDF Bulk Loader Script for CSV Wizard based generation of RDF based Linked Data from ODBC accessible Relational Databases</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Injecting <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x17012e18">Linked Data</a> into the <a href="http://dbpedia.org/resource/World_Wide_Web">Web</a> has been a major pain point for those who seek personal, service, or organization-specific variants of <a class="auto-href" href="http://dbpedia.org/resource/DBpedia" id="link-id0x196518a8">DBpedia</a>. Basically, the sequence goes something like this: </p>
<ol>
<li>
You encounter DBpedia or the <a class="auto-href" href="http://community.linkeddata.org/dataspace/organization/lod#this" id="link-id0x1b26d008">LOD</a> Cloud Pictorial.</li>
<li>
You look around (typically following your nose from link to link).
</li>
<li>
You attempt to publish your own stuff.
</li>
<li>
You get stuck.
</li>
</ol>

<p>The problems typically take the following form:</p>
<ol>
<li>
Functionality confusion about the complementary Name and Address functionality of a single <a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Identifier" id="link-id0xa108a00">URI</a> abstraction
</li>
<li>
Terminology confusion due to conflation and over-loading of terms such as Resource, <a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Locator" id="link-id0x1b3d08f8">URL</a>, Representation, Document, etc.
</li>
<li>
Inability to find robust tools with which to generate Linked Data from existing <a href="http://dbpedia.org/resource/Data">data</a> sources such as relational databases, CSV files, XML, Web Services, etc.
</li>
</ol>

<p>To start addressing these problems, here is a simple guide for generating and publishing Linked Data using <a class="auto-href" href="http://virtuoso.openlinksw.com" id="link-id0x1a7841e0">Virtuoso</a>.</p>

<h3>Step 1 - RDF Data Generation</h3>

<p>Existing RDF data can be added to the Virtuoso RDF Quad Store via a variety of built-in data loader utilities.</p>

<p>Many options allow you to easily and quickly generate RDF data from other data sources:</p>
<ul>
<li>
Install the Sponger Bookmarklet for the <a href="http://uriburner.com" id="link-id0x1aa50800">URIBurner service</a>. Bind this to your own <a class="auto-href" href="http://dbpedia.org/resource/SPARQL" id="link-id0x1a4255e0">SPARQL</a>-compliant backend RDF database (in this scenario, your local Virtuoso instance), and then Sponge some HTTP-accessible resources.
</li>
<li>
Convert relational DBMS data to RDF using the Virtuoso RDF Views Wizard.
</li>
<li>
Starting with CSV files, you can
<ul>
    <li>Place them at an HTTP-accessible location, and use the Virtuoso <a class="auto-href" href="http://virtuoso.openlinksw.com/Whitepapers/html/VirtSpongerWhitePaper.html" id="link-id0x16f7ba58">Sponger</a> to convert them to RDF or;
</li>
<li>
Use the CVS import feature to import their content into Virtuoso&#39;s relational data engine; then use the built-in RDF Views Wizard as with other <a class="auto-href" href="http://dbpedia.org/resource/Relational_database_management_system" id="link-id0x1982ea80">RDBMS</a> data.
</li>
  </ul>
</li>
<li>
Starting from XML files, you can
<ul>
    <li>
Use Virtuoso&#39;s inbuilt XSLT-Processor for manual XML to RDF/XML transformation or;</li>
<li>Leverage the Sponger Cartridge for <a class="auto-href" href="http://dbpedia.org/resource/GRDDL" id="link-id0x1b350968">GRDDL</a>, if there is a transformation service associated with your XML data source, or;</li>
<li>Let the Sponger analyze the XML data source and make a best-effort transformation to RDF.</li>
</ul>
</li>
</ul>


<h3>Step 2 - Linked Data Deployment</h3>
<p>
Install the <a href="http://download.openlinksw.com/packages/6.2/virtuoso/fct_dav.vad" id="link-id0x19845ad0">Faceted Browser VAD package (<code>fct_dav.vad</code>)</a> which delivers the following:</p>
<ol>
<li>
Faceted Browser Engine UI</li>
<li>
Dynamic Hypermedia Resource Generator
<ul>
    <li>delivers descriptor resources for every <a class="auto-href" href="http://dbpedia.org/resource/Entity" id="link-id0x1b3a69f0">entity</a> (data object) in the Native or Virtual Quad Stores</li>
<li>supports a broad array of output formats, including HTML+<a class="auto-href" href="http://dbpedia.org/resource/RDFa" id="link-id0x1a92d2f8">RDFa</a>, RDF/XML, N3/Turtle, NTriples, RDF-JSON, OData+Atom, and OData+JSON.
</li>
  </ul>
</li>
</ol>


<h3>Step 3 - Linked Data Consumption &amp; Exploitation</h3>
<p>
Three simple steps allow you, your enterprise, and your customers to consume and exploit your newly deployed Linked Data --
</p>
<ol>
<li>
Load a page like this in your browser: <code>http://&lt;cname&gt;[:&lt;port&gt;]/describe/?uri=&lt;entity-uri&gt;</code>
<ul>
    <li>
      <code>&lt;cname&gt;[:&lt;port&gt;]</code> gets replaced by the host and port of your Virtuoso instance</li>
<li>
<code>&lt;entity-uri&gt;</code> gets replaced by the URI you want to see described -- for instance, the URI of one of the resources you let the Sponger handle.
</li>
  </ul>
</li>
<li>
Follow the links presented in the descriptor page.
</li>
<li>If you ever see a blank page with a hyperlink subject name in the About: section at the top of the page, simply add the parameter &quot;&amp;sp=1&quot; to the URL in the browser&#39;s Address box, and hit [ENTER].  This will result in an &quot;on the fly&quot; resource retrieval, transformation, and descriptor page generation.</li> 
<li>
Use the navigator controls to page up and down the data associated with the &quot;in scope&quot; resource descriptor.
</li>
</ol>
<h3>Related</h3>
<ul>
<li>
  <a href="http://linkeddata.uriburner.com/describe/?url=http%3A%2F%2Flinkeddata.uriburner.com%2Fabout%2Fid%2Fentity%2Fhttp%2Fwww.amazon.com%2Fo%2FASIN%2F006251587X" id="link-id0x1a8aeaf8">Sample Descriptor Page</a> (what you see post completion of the steps in this post)
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1639" id="link-id0x1af66f38">What is Linked Data, really?</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1613" id="link-id0x1acdbc58">Painless Linked Data Generation via URIBurner</a>
</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtRDFInsert" id="link-id0x1abe3b18">How To Load RDF Data Into Virtuoso</a> (various methods)</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtBulkRDFLoader" id="link-id0x1a441ff0">Virtuoso Bulk Loader Script for RDF</a>
</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtCsvFileBulkLoader" id="link-id0x190382e8">Bulk Loader Script for CSV</a>
</li>
<li>
  <a href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtRdb2RDFViewsGeneration#OneClickLinkedDataGenerationAndDemployment" id="link-id0x1ac9c9c0">Wizard based generation of RDF based Linked Data from ODBC accessible Relational Databases </a>
</li>
</ul>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1655">
  <rss:title>SPARQL Guide for the Perl Developer</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1655</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1655</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1655</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2011-01-25T16:05:17Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">What? A simple guide usable by any Perl developer seeking to exploit SPARQL without hassles. Why? SPARQL is a powerful query language, results serialization format, and an HTTP based data access protocol from the W3C. It provides a mechanism for accessing and integrating data across Deductive Database Systems (colloquially referred to as triple or quad stores in Semantic Web and Linked Data circles) -- database systems (or data spaces) that manage proposition oriented records in 3-tuple (triples) or 4-tuple (quads) form. How? SPARQL queries are actually HTTP payloads (typically). Thus, using a RESTful client-server interaction pattern, you can dispatch calls to a SPARQL compliant data server and receive a payload for local processing. Steps: Determine which SPARQL endpoint you want to access e.g. DBpedia or a local Virtuoso instance (typically: http://localhost:8890/sparql). If using Virtuoso, and you want to populate its quad store using SPARQL, assign &quot;SPARQL_SPONGE&quot; privileges to user &quot;SPARQL&quot; (this is basic control, more sophisticated WebID based ACLs are available for controlling SPARQL access). Script: # # Demonstrating use of a single query to populate a # Virtuoso Quad Store via Perl. # # # HTTP URL is constructed accordingly with CSV query results format as the default via mime type. # use CGI qw/:standard/; use LWP::UserAgent; use Data::Dumper; use Text::CSV_XS; sub sparqlQuery(@args) { my $query=shift; my $baseURL=shift; my $format=shift; %params=( &quot;default-graph&quot; =&gt; &quot;&quot;, &quot;should-sponge&quot; =&gt; &quot;soft&quot;, &quot;query&quot; =&gt; $query, &quot;debug&quot; =&gt; &quot;on&quot;, &quot;timeout&quot; =&gt; &quot;&quot;, &quot;format&quot; =&gt; $format, &quot;save&quot; =&gt; &quot;display&quot;, &quot;fname&quot; =&gt; &quot;&quot; ); @fragments=(); foreach $k (keys %params) { $fragment=&quot;$k=&quot;.CGI::escape($params{$k}); push(@fragments,$fragment); } $query=join(&quot;&amp;&quot;, @fragments); $sparqlURL=&quot;${baseURL}?$query&quot;; my $ua = LWP::UserAgent-&gt;new; $ua-&gt;agent(&quot;MyApp/0.1 &quot;); my $req = HTTP::Request-&gt;new(GET =&gt; $sparqlURL); my $res = $ua-&gt;request($req); $str=$res-&gt;content; $csv = Text::CSV_XS-&gt;new(); foreach $line ( split(/^/, $str) ) { $csv-&gt;parse($line); @bits=$csv-&gt;fields(); push(@rows, [ @bits ] ); } return \@rows; } # Setting Data Source Name (DSN) $dsn=&quot;http://dbpedia.org/resource/DBpedia&quot;; # Virtuoso pragmas for instructing SPARQL engine to perform an HTTP GET using the IRI in # FROM clause as Data Source URL en route to DBMS # record Inserts. $query=&quot;DEFINE get:soft \&quot;replace\&quot;\n # Generic (non Virtuoso specific SPARQL # Note: this will not add records to the # DBMS SELECT DISTINCT * FROM &lt;$dsn&gt; WHERE {?s ?p ?o}&quot;; $data=sparqlQuery($query, &quot;http://localhost:8890/sparql/&quot;, &quot;text/csv&quot;); print &quot;Retrieved data:\n&quot;; print Dumper($data); Output Retrieved data: $VAR1 = [ [ &#39;s&#39;, &#39;p&#39;, &#39;o&#39; ], [ &#39;http://dbpedia.org/resource/DBpedia&#39;, &#39;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&#39;, &#39;http://www.w3.org/2002/07/owl#Thing&#39; ], [ &#39;http://dbpedia.org/resource/DBpedia&#39;, &#39;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&#39;, &#39;http://dbpedia.org/ontology/Work&#39; ], [ &#39;http://dbpedia.org/resource/DBpedia&#39;, &#39;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&#39;, &#39;http://dbpedia.org/class/yago/Software106566077&#39; ], ... Conclusion CSV was chosen over XML (re. output format) since this is about a &quot;no-brainer installation and utilization&quot; guide for a Perl developer that already knows how to use Perl for HTTP based data access within HTML. SPARQL just provides an added bonus to URL dexterity (delivered via URI abstraction) with regards to constructing Data Source Names or Addresses. Related RDF::Query::Client Guide SPARQL Guide for the Perl Developer SPARQL Guide for the PHP Developer SPARQL Guide for the Python Developer SPARQL Guide for the Ruby Developer Simple Guide for using SPARQL with Virtuoso General SPARQL Tutorial Collection Virtuoso Specific SPARQL Tutorial Collection The URI, URL, and Linked Data Meme&#39;s Generic HTTP URI.</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<h3>What?</h3> 
<p>A simple guide usable by any <a class="auto-href" href="http://dbpedia.org/resource/Perl" id="link-id0x1bdcab80">Perl</a> developer seeking to exploit <a class="auto-href" href="http://dbpedia.org/resource/SPARQL" id="link-id0x17b447e8">SPARQL</a> without hassles.</p>

<h3>Why?</h3>
<p>SPARQL is a powerful query language, results serialization format, and an HTTP based <a href="http://dbpedia.org/resource/Data">data</a> access protocol from the W3C. It provides a mechanism for accessing and integrating data across <a href="http://en.wikipedia.org/wiki/Deductive_database" id="link-id0x1cc76540">Deductive Database Systems</a> (colloquially referred to as triple or quad stores in <a class="auto-href" href="http://dbpedia.org/resource/Semantic_Web" id="link-id0x1d944d78">Semantic Web</a> and <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x1c7a87c8">Linked Data</a> circles) -- database systems (or data spaces) that manage proposition oriented records in 3-tuple (triples) or 4-tuple (quads) form. </p>

<h3>How?</h3>
<p>SPARQL queries are actually HTTP payloads (typically). Thus, using a RESTful client-server interaction pattern, you can dispatch calls to a SPARQL compliant data server and receive a payload for local processing.</p>

<h4>Steps:</h4>
<ol>
<li>Determine which SPARQL endpoint you want to access e.g. <a href="http://dbpedia.org/sparql" id="link-id0x1d476520">DBpedia</a> or a local <a class="auto-href" href="http://virtuoso.openlinksw.com" id="link-id0x1bcfe140">Virtuoso</a> instance (typically: http://localhost:8890/sparql).
</li>
<li>If using Virtuoso, and you want to populate its quad store using SPARQL, assign &quot;<a href="http://docs.openlinksw.com/virtuoso/rdfsparql.html#rdfsupportedprotocolendpointuri" id="link-id0x1c7630b8">SPARQL_SPONGE</a>&quot; privileges to user &quot;SPARQL&quot; (this is basic control, more sophisticated WebID based ACLs are available for controlling SPARQL access).</li>
</ol>

<h4>Script:</h4>

<pre>
#
# Demonstrating use of a single query to populate a 
# Virtuoso Quad Store via Perl. 
#

# 
# HTTP <a href="http://dbpedia.org/resource/Uniform_Resource_Locator" id="link-id0x1d6465e8">URL</a> is constructed accordingly with CSV query results format as the default via mime type.
#

use CGI qw/:standard/;
use LWP::UserAgent;
use Data::Dumper;
use Text::CSV_XS;

sub sparqlQuery(@args) {
  my $query=shift;
  my $baseURL=shift;
  my $format=shift;
	
	%params=(
		&quot;default-graph&quot; =&gt; &quot;&quot;, &quot;should-sponge&quot; =&gt; &quot;soft&quot;, &quot;query&quot; =&gt; $query,
		&quot;debug&quot; =&gt; &quot;on&quot;, &quot;timeout&quot; =&gt; &quot;&quot;, &quot;format&quot; =&gt; $format,
		&quot;save&quot; =&gt; &quot;display&quot;, &quot;fname&quot; =&gt; &quot;&quot;
	);
	
	@fragments=();
	foreach $k (keys %params) {
		$fragment=&quot;$k=&quot;.CGI::escape($params{$k});
		push(@fragments,$fragment);
	}
	$query=join(&quot;&amp;&quot;, @fragments);
	
	$sparqlURL=&quot;${baseURL}?$query&quot;;
	
	my $ua = LWP::UserAgent-&gt;new;
	$ua-&gt;agent(&quot;MyApp/0.1 &quot;);
	my $req = HTTP::Request-&gt;new(GET =&gt; $sparqlURL);
	my $res = $ua-&gt;request($req);
	$str=$res-&gt;content;
	
	$csv = Text::CSV_XS-&gt;new();
	
	foreach $line ( split(/^/, $str) ) {
		$csv-&gt;parse($line);
		@bits=$csv-&gt;fields();
	  push(@rows, [ @bits ] );
	}
	return \@rows;
}


# Setting Data Source Name (DSN)

$dsn=&quot;http://dbpedia.org/resource/DBpedia&quot;;

# Virtuoso pragmas for instructing SPARQL engine to perform an HTTP GET using the IRI in
# FROM clause as Data Source URL en route to DBMS
# record Inserts.

$query=&quot;DEFINE get:soft \&quot;replace\&quot;\n

# Generic (non Virtuoso specific SPARQL
# Note: this will not add records to the 
# DBMS 

SELECT DISTINCT * FROM &lt;$dsn&gt; WHERE {?s ?p ?o}&quot;; 

$data=sparqlQuery($query, &quot;http://localhost:8890/sparql/&quot;, &quot;text/csv&quot;);

print &quot;Retrieved data:\n&quot;;
print Dumper($data);
</pre>
<h4>Output</h4>
<pre>
Retrieved data:
$VAR1 = [
          [
            &#39;s&#39;,
            &#39;p&#39;,
            &#39;o&#39;
          ],
          [
            &#39;http://dbpedia.org/resource/DBpedia&#39;,
            &#39;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&#39;,
            &#39;http://www.w3.org/2002/07/owl#Thing&#39;
          ],
          [
            &#39;http://dbpedia.org/resource/DBpedia&#39;,
            &#39;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&#39;,
            &#39;http://dbpedia.org/ontology/Work&#39;
          ],
          [
            &#39;http://dbpedia.org/resource/DBpedia&#39;,
            &#39;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&#39;,
            &#39;http://dbpedia.org/class/yago/Software106566077&#39;
          ],
...
</pre>
<h3>Conclusion</h3>
<p>
CSV was chosen over XML (re. output format) since this is about a &quot;no-brainer installation and utilization&quot; guide for a Perl developer that already knows how to use Perl for HTTP based data access within HTML. SPARQL just provides an added bonus to URL dexterity (delivered via <a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Identifier" id="link-id0x1d29da98">URI</a> abstraction) with regards to constructing Data Source Names or Addresses.</p>
<h3>Related</h3>
<ul>
<li>
  <a href="http://cpansearch.perl.org/src/TOBYINK/RDF-Query-Client-0.103/README" id="link-id0x1c279130">RDF::Query::Client Guide</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1653" id="link-id0x1cf307f0">SPARQL Guide for the Perl Developer</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1652" id="link-id0x1b0ffb28">SPARQL Guide for the PHP Developer</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1651" id="link-id0x1a8c5ae0">SPARQL Guide for the Python Developer</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1648" id="link-id0x1b86ad28">SPARQL Guide for the Ruby Developer</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1646" id="link-id0x1c7af188">Simple Guide for using SPARQL with Virtuoso</a> 
</li>
<li>
  <a href="http://www.delicious.com/kidehen/sparql_tutorial" id="link-id0x1ac1ba48">General SPARQL Tutorial Collection</a> </li>
<li>
  <a href="http://www.delicious.com/kidehen/virtuoso_sparql_tutorial" id="link-id0x1c7be660">Virtuoso Specific SPARQL Tutorial Collection</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1567" id="link-id0x1c52b438">The URI, URL, and Linked Data Meme&#39;s Generic HTTP URI</a>.
</li>
</ul>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1648">
  <rss:title>SPARQL for the Ruby Developer</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1648</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1648</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1648</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2011-01-18T19:48:34Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">What? A simple guide usable by any Ruby developer seeking to exploit SPARQL without hassles. Why? SPARQL is a powerful query language, results serialization format, and an HTTP based data access protocol from the W3C. It provides a mechanism for accessing and integrating data across Deductive Database Systems (colloquially referred to as triple or quad stores in Semantic Web and Linked Data circles) -- database systems (or data spaces) that manage proposition oriented records in 3-tuple (triples) or 4-tuple (quads) form. How? SPARQL queries are actually HTTP payloads (typically). Thus, using a RESTful client-server interaction pattern, you can dispatch calls to a SPARQL compliant data server and receive a payload for local processing e.g. local object binding re. Ruby. Steps: From your command line execute: aptitude search &#39;^ruby&#39;, to verify Ruby is in place Determine which SPARQL endpoint you want to access e.g. DBpedia or a local Virtuoso instance (typically: http://localhost:8890/sparql). If using Virtuoso, and you want to populate its quad store using SPARQL, assign &quot;SPARQL_SPONGE&quot; privileges to user &quot;SPARQL&quot; (this is basic control, more sophisticated WebID based ACLs are available for controlling SPARQL access). Script: #!/usr/bin/env ruby # # Demonstrating use of a single query to populate a # Virtuoso Quad Store. # require &#39;net/http&#39; require &#39;cgi&#39; require &#39;csv&#39; # # We opt for CSV based output since handling this format is straightforward in Ruby, by default. # HTTP URL is constructed accordingly with CSV as query results format in mind. def sparqlQuery(query, baseURL, format=&quot;text/csv&quot;) params={ &quot;default-graph&quot; =&gt; &quot;&quot;, &quot;should-sponge&quot; =&gt; &quot;soft&quot;, &quot;query&quot; =&gt; query, &quot;debug&quot; =&gt; &quot;on&quot;, &quot;timeout&quot; =&gt; &quot;&quot;, &quot;format&quot; =&gt; format, &quot;save&quot; =&gt; &quot;display&quot;, &quot;fname&quot; =&gt; &quot;&quot; } querypart=&quot;&quot; params.each { |k,v| querypart+=&quot;#{k}=#{CGI.escape(v)}&amp;&quot; } sparqlURL=baseURL+&quot;?#{querypart}&quot; response = Net::HTTP.get_response(URI.parse(sparqlURL)) return CSV::parse(response.body) end # Setting Data Source Name (DSN) dsn=&quot;http://dbpedia.org/resource/DBpedia&quot; #Virtuoso pragmas for instructing SPARQL engine to perform an HTTP GET #using the IRI in FROM clause as Data Source URL query=&quot;DEFINE get:soft \&quot;replace\&quot; SELECT DISTINCT * FROM &lt;#{dsn}&gt; WHERE {?s ?p ?o} &quot; #Assume use of local installation of Virtuoso #otherwise you can change URL to that of a public endpoint #for example DBpedia: http://dbpedia.org/sparql data=sparqlQuery(query, &quot;http://localhost:8890/sparql/&quot;) puts &quot;Got data:&quot; p data # # End Output Got data: [[&quot;s&quot;, &quot;p&quot;, &quot;o&quot;], [&quot;http://dbpedia.org/resource/DBpedia&quot;, &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&quot;, &quot;http://www.w3.org/2002/07/owl#Thing&quot;], [&quot;http://dbpedia.org/resource/DBpedia&quot;, &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&quot;, &quot;http://dbpedia.org/ontology/Work&quot;], [&quot;http://dbpedia.org/resource/DBpedia&quot;, &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&quot;, &quot;http://dbpedia.org/class/yago/Software106566077&quot;], ... Conclusion CSV was chosen over XML (re. output format) since this is about a &quot;no-brainer installation and utilization&quot; guide for a Ruby developer that already knows how to use Ruby for HTTP based data access. SPARQL just provides an added bonus to URL dexterity (delivered via URI abstraction) with regards to constructing Data Source Names or Addresses. Related SPARQL and Ruby SPARQL Client Library Example Simple Guide for using SPARQL with Virtuoso General SPARQL Tutorial Collection Virtuoso Specific SPARQL Tutorial Collection The URI, URL, and Linked Data Meme&#39;s Generic HTTP URI.</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<h3>What?</h3> 
<p>A simple guide usable by any <a class="auto-href" href="http://dbpedia.org/resource/Ruby_programming_language" id="link-id0x1bb88908">Ruby</a> developer seeking to exploit <a class="auto-href" href="http://dbpedia.org/resource/SPARQL" id="link-id0x1ae67500">SPARQL</a> without hassles.</p>

<h3>Why?</h3>
<p>SPARQL is a powerful query language, results serialization format, and an HTTP based <a href="http://dbpedia.org/resource/Data">data</a> access protocol from the W3C. It provides a mechanism for accessing and integrating data across <a href="http://en.wikipedia.org/wiki/Deductive_database" id="link-id0x1bc61d88">Deductive Database Systems</a> (colloquially referred to as triple or quad stores in <a class="auto-href" href="http://dbpedia.org/resource/Semantic_Web" id="link-id0x1cc11420">Semantic Web</a> and <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x1b2e7780">Linked Data</a> circles) -- database systems (or data spaces) that manage proposition oriented records in 3-tuple (triples) or 4-tuple (quads) form. </p>

<h3>How?</h3>
<p>SPARQL queries are actually HTTP payloads (typically). Thus, using a RESTful client-server interaction pattern, you can dispatch calls to a SPARQL compliant data server and receive a payload for local processing e.g. local object binding re. Ruby. </p>

<h4>Steps:</h4>
<ol>
<li>
From your command line execute: aptitude search &#39;^ruby&#39;, to verify Ruby is in place
</li>
<li>Determine which SPARQL endpoint you want to access e.g. <a href="http://dbpedia.org/sparql" id="link-id0x1d476520">DBpedia</a> or a local <a class="auto-href" href="http://virtuoso.openlinksw.com" id="link-id0x1bcfe140">Virtuoso</a> instance (typically: http://localhost:8890/sparql).
</li>
<li>If using Virtuoso, and you want to populate its quad store using SPARQL, assign &quot;<a href="http://docs.openlinksw.com/virtuoso/rdfsparql.html#rdfsupportedprotocolendpointuri" id="link-id0x1c7630b8">SPARQL_SPONGE</a>&quot; privileges to user &quot;SPARQL&quot; (this is basic control, more sophisticated WebID based ACLs are available for controlling SPARQL access).</li>
</ol>

<h4>Script:</h4>

<pre>
#!/usr/bin/env ruby
#
# Demonstrating use of a single query to populate a # Virtuoso Quad Store. 
#

require &#39;net/http&#39;
require &#39;cgi&#39;
require &#39;csv&#39;

#
# We opt for CSV based output since handling this format is straightforward in Ruby, by default.
# HTTP <a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Locator" id="link-id0x1acee348">URL</a> is constructed accordingly with CSV as query results format in mind.

def sparqlQuery(query, baseURL, format=&quot;text/csv&quot;)
	params={
		&quot;default-graph&quot; =&gt; &quot;&quot;,
		&quot;should-sponge&quot; =&gt; &quot;soft&quot;,
		&quot;query&quot; =&gt; query,
		&quot;debug&quot; =&gt; &quot;on&quot;,
		&quot;timeout&quot; =&gt; &quot;&quot;,
		&quot;format&quot; =&gt; format,
		&quot;save&quot; =&gt; &quot;display&quot;,
		&quot;fname&quot; =&gt; &quot;&quot;
	}
	querypart=&quot;&quot;
	params.each { |k,v|
		querypart+=&quot;#{k}=#{CGI.escape(v)}&amp;&quot;
	}
  
	sparqlURL=baseURL+&quot;?#{querypart}&quot;
	
	response = Net::HTTP.get_response(<a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Identifier" id="link-id0x1d24dfd8">URI</a>.parse(sparqlURL))

	return CSV::parse(response.body)
	
end

# Setting Data Source Name (DSN)

dsn=&quot;http://dbpedia.org/resource/DBpedia&quot;

#Virtuoso pragmas for instructing SPARQL engine to perform an HTTP GET
#using the IRI in FROM clause as Data Source URL

query=&quot;DEFINE get:soft \&quot;replace\&quot;
SELECT DISTINCT * FROM &lt;#{dsn}&gt; WHERE {?s ?p ?o} &quot;

#Assume use of local installation of Virtuoso 
#otherwise you can change URL to that of a public endpoint
#for example DBpedia: http://dbpedia.org/sparql

data=sparqlQuery(query, &quot;http://localhost:8890/sparql/&quot;)

puts &quot;Got data:&quot;
p data

#
# End
</pre><h4>Output</h4>
<pre>
Got data:
[[&quot;s&quot;, &quot;p&quot;, &quot;o&quot;], 
  [&quot;http://dbpedia.org/resource/DBpedia&quot;, 
   &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&quot;, 
   &quot;http://www.w3.org/2002/07/owl#Thing&quot;], 
  [&quot;http://dbpedia.org/resource/DBpedia&quot;, 
   &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&quot;, 
   &quot;http://dbpedia.org/ontology/Work&quot;], 
  [&quot;http://dbpedia.org/resource/DBpedia&quot;, 
   &quot;http://www.w3.org/1999/02/22-rdf-syntax-ns#type&quot;, 
   &quot;http://dbpedia.org/class/yago/Software106566077&quot;],
...
</pre>
<h3>Conclusion</h3>
<p>
<a href="http://en.wikipedia.org/wiki/Comma-separated_values" id="link-id0x1cac8420">CSV</a> was chosen over XML (re. output format) since this is about a &quot;no-brainer installation and utilization&quot; guide for a Ruby developer that already knows how to use Ruby for HTTP based data access. SPARQL just provides an added bonus to URL dexterity (delivered via URI abstraction) with regards to constructing Data Source Names or Addresses.</p>
<h3>Related</h3>
<ul>
<li>
  <a href="http://www.taxonconcept.org/how-to/ruby-code-examples/how-do-i-use-ruby-to-query-a-sparql-endpoint.html" id="link-id0x1aa83678">SPARQL and Ruby SPARQL Client Library Example</a>
</li> 
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1646" id="link-id0x1c7af188">Simple Guide for using SPARQL with Virtuoso</a> 
</li>
<li>
  <a href="http://www.delicious.com/kidehen/sparql_tutorial" id="link-id0x1ac1ba48">General SPARQL Tutorial Collection</a> </li>
<li>
  <a href="http://www.delicious.com/kidehen/virtuoso_sparql_tutorial" id="link-id0x1c7be660">Virtuoso Specific SPARQL Tutorial Collection</a>
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1567" id="link-id0x1c52b438">The URI, URL, and Linked Data Meme&#39;s Generic HTTP URI</a>.
</li>
</ul>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1647">
  <rss:title>Simple Virtuoso Installation &amp; Utilization Guide for SPARQL Users (Update 5)</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1647</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1647</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1647</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2011-01-16T07:06:21Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">What is SPARQL? A declarative query language from the W3C for querying structured propositional data (in the form of 3-tuple [triples] or 4-tuple [quads] records) stored in a deductive database (colloquially referred to as triple or quad stores in Semantic Web and Linked Data parlance). SPARQL is inherently platform independent. Like SQL, the query language and the backend database engine are distinct. Database clients capture SPARQL queries which are then passed on to compliant backend databases. Why is it important? Like SQL for relational databases, it provides a powerful mechanism for accessing and joining data across one or more data partitions (named graphs identified by IRIs). The aforementioned capability also enables the construction of sophisticated Views, Reports (HTML or those produced in native form by desktop productivity tools), and data streams for other services. Unlike SQL, SPARQL includes result serialization formats and an HTTP based wire protocol. Thus, the ubiquity and sophistication of HTTP is integral to SPARQL i.e., client side applications (user agents) only need to be able to perform an HTTP GET against a URL en route to exploiting the power of SPARQL. How do I use it, generally? Locate a SPARQL endpoint (DBpedia, LOD Cloud Cache, Data.Gov, URIBurner, others), or; Install a SPARQL compliant database server (quad or triple store) on your desktop, workgroup server, data center, or cloud (e.g., Amazon EC2 AMI) Start the database server Execute SPARQL Queries via the SPARQL endpoint. How do I use SPARQL with Virtuoso? What follows is a very simple guide for using SPARQL against your own instance of Virtuoso: Software Download and Installation Data Loading from Data Sources exposed at Network Addresses (e.g. HTTP URLs) using very simple methods Actual SPARQL query execution via SPARQL endpoint. Installation Steps Download Virtuoso Open Source or Virtuoso Commercial Editions Run installer (if using Commercial edition of Windows Open Source Edition, otherwise follow build guide) Follow post-installation guide and verify installation by typing in the command: virtuoso -? (if this fails check you&#39;ve followed installation and setup steps, then verify environment variables have been set) Start the Virtuoso server using the command: virtuoso-start.sh Verify you have a connection to the Virtuoso Server via the command: isql localhost (assuming you&#39;re using default DB settings) or the command: isql localhost:1112 (assuming demo database) or goto your browser and type in: http://&lt;virtuoso-server-host-name&gt;:[port]/conductor (e.g. http://localhost:8889/conductor for default DB or http://localhost:8890/conductor if using Demo DB) Go to SPARQL endpoint which is typically -- http://&lt;virtuoso-server-host-name&gt;:[port]/sparql Run a quick sample query (since the database always has system data in place): select distinct * where {?s ?p ?o} limit 50 . Troubleshooting Ensure environment settings are set and functional -- if using Mac OS X or Windows, so you don&#39;t have to worry about this, just start and stop your Virtuoso server using native OS services applets If using the Open Source Edition, follow the getting started guide -- it covers PATH and startup directory location re. starting and stopping Virtuoso servers. Sponging (HTTP GETs against external Data Sources) within SPARQL queries is disabled by default. You can enable this feature by assigning &quot;SPARQL_SPONGE&quot; privileges to user &quot;SPARQL&quot;. Note, more sophisticated security exists via WebID based ACLs. Data Loading Steps Identify an RDF based structured data source of interest -- a file that contains 3-tuple / triples available at an address on a public or private HTTP based network Determine the Address (URL) of the RDF data source Go to your Virtuoso SPARQL endpoint and type in the following SPARQL query: DEFINE GET:SOFT &quot;replace&quot; SELECT DISTINCT * FROM &lt;RDFDataSourceURL&gt; WHERE {?s ?p ?o} All the triples in the RDF resource (data source accessed via URL) will be loaded into the Virtuoso Quad Store (using RDF Data Source URL as the internal quad store Named Graph IRI) as part of the SPARQL query processing pipeline. Note: the data source URL doesn&#39;t even have to be RDF based -- which is where the Virtuoso Sponger Middleware comes into play (download and install the VAD installer package first) since it delivers the following features to Virtuoso&#39;s SPARQL engine: Transformation of data from non RDF data sources (file content, hypermedia resources, web services output etc..) into RDF based 3-tuples (triples) Cache Invalidation Scheme Construction -- thus, subsequent queries (without the define get:soft &quot;replace&quot; pragma will not be required bar when you forcefully want to override cache). If you have very large data sources like DBpedia etc. from CKAN, simply use our bulk loader . SPARQL Endpoint Discovery Public SPARQL endpoints are emerging at an ever increasing rate. Thus, we&#39;ve setup up a DNS lookup service that provides access to a large number of SPARQL endpoints. Of course, this doesn&#39;t cover all existing endpoints, so if our endpoint is missing please ping me. Here are a collection of commands for using DNS-SD to discover SPARQL endpoints: dns-sd -B _sparql._tcp sparql.openlinksw.com -- browse for services instances dns-sd -Z _sparql._tcp sparql.openlinksw.com -- output results in Zone File format Related Using HTTP from Ruby -- you can just make SPARQL Protocol URLs re. SPARQL Using SPARQL Endpoints via Ruby -- Ruby example using DBpedia endpoint Interactive SPARQL Query By Example (QBE) tool -- provides a graphical user interface (as is common in SQL realm re. query building against RDBMS engines) that works with any SPARQL endpoint Other methods of loading RDF data into Virtuoso Virtuoso Sponger -- architecture and how it turns a wide variety of non RDF data sources into SPARQL accessible data Using OpenLink Data Explorer (ODE) to populate Virtuoso -- locate a resource of interest; click on a bookmarklet or use context menus (if using ODE extensions for Firefox, Safari, or Chrome); and you&#39;ll have SPARQL accessible data automatically inserted into your Virtuoso instance. W3C&#39;s SPARQLing Data Access Ingenuity -- an older generic SPARQL introduction post Collection of SPARQL Query Examples -- GoodRelations (Product Offers), FOAF (Profiles), SIOC (Data Spaces -- Blogs, Wikis, Bookmarks, Feed Collections, Photo Galleries, Briefcase/DropBox, AddressBook, Calendars, Discussion Forums) Collection of Live SPARQL Queries against LOD Cloud Cache -- simple and advanced queries.</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<h3>What is <a class="auto-href" href="http://dbpedia.org/resource/SPARQL" id="link-id0x1ab60ac0">SPARQL</a>?</h3>
<p>A declarative query language from the W3C for querying structured propositional <a href="http://dbpedia.org/resource/Data">data</a> (in the form of 3-<a href="http://en.wikipedia.org/wiki/Tuple" id="link-id0x1b1e0010">tuple</a> [triples] or 4-tuple [quads] records) stored in a <a href="http://en.wikipedia.org/wiki/Deductive_database" id="link-id0x1cf8af98">deductive database</a> (colloquially referred to as triple or quad stores in <a class="auto-href" href="http://dbpedia.org/resource/Semantic_Web" id="link-id0x1caf5050">Semantic Web</a> and <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x19d781b8">Linked Data</a> parlance).</p>
<p>SPARQL is inherently platform independent. Like <a class="auto-href" href="http://dbpedia.org/resource/SQL" id="link-id0x1b879140">SQL</a>, the query language and the backend database engine are distinct. Database clients capture SPARQL queries which are then passed on to compliant backend databases.</p>
<h3>Why is it important?</h3>
<p>Like SQL for relational databases, it provides a powerful mechanism for accessing and joining data across one or more data partitions (named graphs identified by IRIs). The aforementioned capability also enables the construction of sophisticated Views, Reports (HTML or those produced in native form by desktop productivity tools), and data streams for other services.</p>
<p>Unlike SQL, SPARQL includes result serialization formats and an HTTP based wire protocol. Thus, the ubiquity and sophistication of HTTP is integral to SPARQL i.e., client side applications (user agents) only need to be able to perform an HTTP GET against a <a class="auto-href" href="http://dbpedia.org/resource/Uniform_Resource_Locator" id="link-id0x1ba287e8">URL</a> en route to exploiting the power of SPARQL.</p>
<h3>How do I use it, generally?</h3>
<ol>
<li>Locate a SPARQL endpoint (<a href="http://dbpedia.org/sparql" id="link-id0x1d7436b0">DBpedia</a>, <a href="http://lod.openlinksw.com/sparql" id="link-id0x1bf20690">LOD Cloud Cache</a>, <a href="http://semantic.data.gov" id="link-id0x1a8ebc28">Data.Gov</a>, <a href="http://linkeddata.uriburner.com/sparql" id="link-id0x1be93070">URIBurner</a>, <a href="http://www.delicious.com/kidehen/sparql_endpoint" id="link-id0x1cce9b40">others</a>),  or;</li>
<li>Install a SPARQL compliant database server (quad or triple store) on your desktop, workgroup server, data center, or cloud (e.g., <a href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtuosoEC2AMI" id="link-id0x1cd697a0">Amazon EC2 AMI</a>)</li>
<li>Start the database server</li>
<li>Execute SPARQL Queries via the <a href="http://lod.openlinksw.com/sparql" id="link-id0x1b99d790">SPARQL endpoint.</a>
</li>
</ol>
<h3>How do I use SPARQL with <a class="auto-href" href="http://virtuoso.openlinksw.com" id="link-id0x1c9adc80">Virtuoso</a>?</h3>
<p>What follows is a very simple guide for using SPARQL against your own instance of Virtuoso:</p>
<ol>
<li>Software Download and Installation</li>
<li>Data Loading from Data Sources exposed at Network Addresses (e.g. HTTP URLs) using very simple methods</li>
<li>Actual SPARQL query execution via SPARQL endpoint.</li>
</ol>
<h3>Installation Steps</h3>
<ol>
<li>
Download <a href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSDownload" id="link-id0x1b795100">Virtuoso Open Source</a> or <a href="http://download.openlinksw.com/virtwiz/virtuoso.php" id="link-id0x1cce46f0">Virtuoso Commercial</a> Editions
</li>
<li>
Run installer (if using Commercial edition of Windows Open Source Edition, otherwise follow build guide) 
</li>
<li>
Follow post-installation guide and verify installation by typing in the command: virtuoso -? (if this fails check you&#39;ve followed installation and setup steps, then verify environment variables have been set)
</li>
<li>
Start the Virtuoso server using the command: virtuoso-start.sh
</li>
<li> 
Verify you have a connection to the Virtuoso Server via the command: isql localhost (assuming you&#39;re using default DB settings) or the command: isql localhost:1112 (assuming demo database) or goto your browser and type in: http://&lt;virtuoso-server-host-name&gt;:[port]/conductor (e.g. http://localhost:8889/conductor for default DB or http://localhost:8890/conductor if using Demo DB)
</li>
<li>
Go to SPARQL endpoint which is typically -- http://&lt;virtuoso-server-host-name&gt;:[port]/sparql
</li>
<li>
Run a quick sample query (since the database always has system data in place): select distinct * where {?s ?p ?o} limit 50 .</li>
</ol>
<h3>Troubleshooting</h3>
<ol>
<li>Ensure environment settings are set and functional -- if using Mac OS X or Windows, so you don&#39;t have to worry about this, just start and stop your Virtuoso server using native OS services applets</li>
<li>If using the Open Source Edition, follow the <a href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSMake#Getting%20Started" id="link-id0x1bfa7548">getting started guide</a> -- it covers PATH and startup directory location re. starting and stopping Virtuoso servers.</li>
<li>Sponging (HTTP GETs against external Data Sources) within SPARQL queries is disabled by default. You can enable this feature by assigning &quot;<a href="http://docs.openlinksw.com/virtuoso/rdfsparql.html#rdfsupportedprotocolendpointuri" id="link-id0x1d566270">SPARQL_SPONGE</a>&quot; privileges to user &quot;SPARQL&quot;. Note, more sophisticated security exists via <a href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtAuthPolicyFOAFSSL" id="link-id0x1a3c9eb8">WebID based ACLs</a>.
</li>
</ol>

<h3>Data Loading Steps</h3>
<ol>
<li>
Identify an RDF based structured data source of interest -- a file that contains 3-tuple / triples available at an address on a public or private HTTP based network
</li>
<li>Determine the Address (URL) of the RDF data source</li>
<li>Go to your Virtuoso SPARQL endpoint and type in the following SPARQL query: DEFINE GET:SOFT &quot;replace&quot; SELECT DISTINCT * FROM &lt;RDFDataSourceURL&gt; WHERE {?s ?p ?o}
</li>
<li>
All the triples in the RDF resource (data source accessed via URL) will be loaded into the Virtuoso Quad Store (using RDF Data Source URL as the internal quad store Named Graph IRI) as part of the SPARQL query processing pipeline.
</li>
</ol>
<p>
Note: the data source URL doesn&#39;t even have to be RDF based -- which is where the Virtuoso <a class="auto-href" href="http://virtuoso.openlinksw.com/Whitepapers/html/VirtSpongerWhitePaper.html" id="link-id0x1d1a0978">Sponger</a> Middleware comes into play (download and install the <a href="http://s3.amazonaws.com/opldownload/uda/vad-packages/6.1/virtuoso/rdf_mappers_dav.vad" id="link-id0x1d0e1530">VAD installer package</a> first) since it delivers the following features to Virtuoso&#39;s SPARQL engine:
</p>
<ol>
<li>
Transformation of data from non RDF data sources (file content, hypermedia resources, <a href="http://dbpedia.org/resource/World_Wide_Web">web</a> services output etc..) into RDF based 3-tuples (triples)</li>
<li>
Cache Invalidation Scheme Construction -- thus, subsequent queries (without the define get:soft &quot;replace&quot; pragma will not be required bar when you forcefully want to override cache).</li>
<li>
If you have very large data sources like DBpedia etc. from CKAN, simply use our <a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtBulkRDFLoader" id="link-id0x1d19b4b0">bulk loader</a> .
</li>
</ol>
<h3>SPARQL Endpoint Discovery</h3>
<p>Public SPARQL endpoints are emerging at an ever increasing rate. Thus, we&#39;ve setup up a DNS lookup service that provides access to a large number of SPARQL endpoints. Of course, this doesn&#39;t cover all existing endpoints, so if our endpoint is missing please ping <a class="auto-href" href="http://myopenlink.net/dataspace/person/kidehen#this" id="link-id0x1d634848">me</a>.</p>
<p>Here are a collection of commands for using DNS-SD to discover SPARQL endpoints:</p>
<ol>
<li>dns-sd -B _sparql._tcp sparql.openlinksw.com -- browse for services instances</li>
<li>dns-sd -Z _sparql._tcp sparql.openlinksw.com -- output results in Zone File format</li>
<li></li>
</ol>

<h3>Related</h3>
<ol>
<li>
  <a href="http://www.ensta.fr/~diam/ruby/online/ruby-doc-stdlib/libdoc/net/http/rdoc/index.html" id="link-id0x1b156610">Using HTTP from Ruby</a> -- you can just make <a href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VOSSparqlProtocol" id="link-id0x1d024d60">SPARQL Protocol URLs</a> re. SPARQL</li>
<li>
  <a href="http://sparql.rubyforge.org/client/" id="link-id0x1cd43a48">Using SPARQL Endpoints via Ruby</a> -- Ruby example using DBpedia endpoint</li>
<li>
  <a href="http://wikis.openlinksw.com/dataspace/owiki/wiki/OATWikiWeb/InteractiveSparqlQueryBuilder" id="link-id0x1b9d2190">Interactive SPARQL Query By Example (QBE) tool</a> -- provides a graphical user interface (as is common in SQL realm re. query building against <a class="auto-href" href="http://dbpedia.org/resource/Relational_database_management_system" id="link-id0x1bfffb70">RDBMS</a> engines) that works with any SPARQL endpoint
</li>
<li>
<a href="http://www.openlinksw.com/dataspace/dav/wiki/Main/VirtRDFInsert" id="link-id0x1ab63de0">Other methods of loading RDF data into Virtuoso</a>
</li>
<li>
<a href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSponger" id="link-id0x1ca248e0">Virtuoso Sponger</a> -- architecture and how it turns a wide variety of non RDF data sources into SPARQL accessible data
</li>
<li>
<a href="http://ode.openlinksw.com/example.html" id="link-id0x1be34758">Using OpenLink Data Explorer</a> (ODE) to populate Virtuoso -- locate a resource of interest; click on a bookmarklet or use <a class="auto-href" href="http://dbpedia.org/resource/Context_%28language_use%29" id="link-id0x1ca84af0">context</a> menus (if using ODE extensions for Firefox, Safari, or Chrome); and you&#39;ll have SPARQL accessible data automatically inserted into your Virtuoso instance.
</li>
<li>
  <a href="http://www.openlinksw.com/dataspace/kidehen@openlinksw.com/weblog/kidehen@openlinksw.com%27s%20BLOG%20%5B127%5D/1295" id="link-id0x1c9060f0">W3C&#39;s SPARQLing Data Access Ingenuity</a> -- an older generic SPARQL introduction post
</li>
<li>
<a href="http://virtuoso.openlinksw.com/dataspace/dav/wiki/Main/VirtSPARQLRef" id="link-id0x1cf1e298">Collection of SPARQL Query Examples </a>-- GoodRelations (Product Offers), <a class="auto-href" href="http://dbpedia.org/resource/Friend_of_a_friend" id="link-id0x1c0445d0">FOAF</a> (Profiles), <a class="auto-href" href="http://dbpedia.org/resource/SIOC" id="link-id0x1b785e48">SIOC</a> (Data Spaces -- <a href="http://ods.openlinksw.com/dataspace/dav/wiki/ODS/ODSAtomOWLRefExampleBlog" id="link-id0x1b6c9f78">Blogs</a>, <a href="http://ods.openlinksw.com/dataspace/dav/wiki/ODS/ODSAtomOWLRefExampleWiki" id="link-id0x1c188280">Wikis</a>, <a href="http://ods.openlinksw.com/dataspace/dav/wiki/ODS/ODSAtomOWLRefExampleBookmarks" id="link-id0x1a9a8f98">Bookmarks</a>, <a href="http://ods.openlinksw.com/dataspace/dav/wiki/ODS/ODSAtomOWLRefExampleFeeds" id="link-id0x1720c658">Feed Collections</a>, <a href="http://ods.openlinksw.com/dataspace/dav/wiki/ODS/ODSAtomOWLRefExampleGallery" id="link-id0x1cdba348">Photo Galleries</a>, <a href="http://ods.openlinksw.com/dataspace/dav/wiki/ODS/ODSAtomOWLRefExampleBriefcase" id="link-id0x1c8f1148">Briefcase/DropBox</a>, <a href="http://ods.openlinksw.com/dataspace/dav/wiki/ODS/ODSAtomOWLRefExampleAddressbook" id="link-id0x1b5eb7e0">AddressBook</a>, <a href="http://ods.openlinksw.com/dataspace/dav/wiki/ODS/ODSAtomOWLRefExampleCalendar" id="link-id0x1c575120">Calendars</a>, <a href="http://ods.openlinksw.com/dataspace/dav/wiki/ODS/ODSAtomOWLRefExampleDiscussions" id="link-id0x1c73be98">Discussion Forums</a>)
</li>
<li>
<a href="http://lod.openlinksw.com/demo_queries/" id="link-id0x1b08aa00">Collection of Live SPARQL Queries against LOD Cloud Cache</a> -- simple and advanced queries.
</li>
</ol>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
 <rss:item xmlns:rss="http://purl.org/rss/1.0/" rdf:about="http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1643">
  <rss:title>6 Things That Must Remain Distinct re. Data</rss:title>
  <rss:link>http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/?id=1643</rss:link>
  <wfw:comment xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/mt-tb/Http/comments?id=1643</wfw:comment>
  <wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">http://www.openlinksw.com/blog/kidehen@openlinksw.com/blog/gems/rsscomment.xml?:id=1643</wfw:commentRss>
  <dc:date xmlns:dc="http://purl.org/dc/elements/1.1/">2010-11-03T17:02:32Z</dc:date>
  <dc:description xmlns:dc="http://purl.org/dc/elements/1.1/">Conflation is the tech industry&#39;s equivalent of macroeconomic inflation. Whenever it rears it head, we lose value courtesy of diminishing productivity. Looking retrospectively at any technology failure -- enterprises or industry at large -- you will eventually discover -- at the core -- messy conflation of at least one of the following: Data Model (Semantics) Data Object (Entity) Names (Identifiers) Data Representation Syntax (Markup) Data Access Protocol Data Presentation Syntax (Markup) Data Presentation Media. The Internet &amp; World Wide Web (InterWeb) are massive successes because their respective architectural cores embody the critical separation outlined above. The Web of Linked Data is going to become a global reality, and massive success, because it leverages inherently sound architecture -- bar conflationary distractions of RDF. :-)</dc:description>
  <content:encoded xmlns:content="http://purl.org/rss/1.0/modules/content/"><![CDATA[<p>Conflation is the tech industry&#39;s equivalent of macroeconomic inflation. Whenever it rears it head, we lose value courtesy of diminishing productivity.</p>

<p>Looking retrospectively at any technology failure -- enterprises or industry at large -- you will eventually discover -- at the core -- messy conflation of at least one of the following:</p>
<ol>
<li>
<a href="http://dbpedia.org/resource/Data">Data</a> Model (Semantics)
</li>
<li>
Data Object (<a class="auto-href" href="http://dbpedia.org/resource/Entity" id="link-id0x138a4c88">Entity</a>) Names (Identifiers)
</li>
<li>
Data Representation Syntax (Markup)
</li>
<li>
Data Access Protocol
</li>
<li>
Data Presentation Syntax (Markup)
</li>
<li>
Data Presentation Media.
</li>
</ol>

<p>The <a class="auto-href" href="http://dbpedia.org/resource/Internet" id="link-id0x1b4a9918">Internet</a> &amp; <a class="auto-href" href="http://dbpedia.org/resource/World_Wide_Web" id="link-id0x1a8f8700">World Wide Web</a> (InterWeb) are massive successes because their respective architectural cores embody the critical separation outlined above.</p>

<p>The <a href="http://dbpedia.org/resource/World_Wide_Web">Web</a> of <a class="auto-href" href="http://dbpedia.org/resource/Linked_Data" id="link-id0x156246e0">Linked Data</a> is going to become a global reality, and massive success, because it leverages inherently sound architecture -- bar conflationary distractions of RDF. :-)</p>]]></content:encoded>
  <dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kingsley Uyi Idehen &lt;kidehen@openlinksw.com&gt;</dc:creator>
 </rss:item>
</rdf:RDF>